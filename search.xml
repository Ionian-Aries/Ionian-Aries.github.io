<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TypeScript入门知识点</title>
      <link href="/2022/05/08/%E5%89%8D%E7%AB%AF/typescript/ts%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/05/08/%E5%89%8D%E7%AB%AF/typescript/ts%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-快速入门"><a href="#TypeScript-快速入门" class="headerlink" title="TypeScript 快速入门"></a>TypeScript 快速入门</h1><h2 id="1-TypeScript-简介"><a href="#1-TypeScript-简介" class="headerlink" title="1.TypeScript 简介"></a>1.TypeScript 简介</h2><ol><li>TypeScript 是 JavaScript 的超集。</li><li>它对 JS 进行了扩展，向 JS 中引入了类型的概念，并添加了许多新的特性。</li><li>TS 代码需要通过编译器编译为 JS，然后再交由 JS 解析器执行。</li><li>TS 完全兼容 JS，换言之，任何的 JS 代码都可以直接当成 JS 使用。</li><li>相较于 JS 而言，TS 拥有了静态类型，更加严格的语法，更强大的功能；TS 可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS 代码可以编译为任意版本的 JS 代码，可有效解决不同 JS 运行环境的兼容问题；同样的功能，TS 的代码量要大于 JS，但由于 TS 的代码结构更加清晰，变量类型更加明确，在后期代码的维护中 TS 却远远胜于 JS。</li></ol><h2 id="2-TypeScript-开发环境搭建"><a href="#2-TypeScript-开发环境搭建" class="headerlink" title="2.TypeScript 开发环境搭建"></a>2.TypeScript 开发环境搭建</h2><ol><li><p>下载 Node.js</p><ul><li>64 位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li><li>32 位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li></ul></li><li><p>安装 Node.js</p></li><li><p>使用 npm 全局安装 typescript</p><ul><li>进入命令行</li><li>输入：npm i -g typescript</li></ul></li><li><p>创建一个 ts 文件</p></li><li><p>使用 tsc 对 ts 文件进行编译</p><ul><li><p>进入命令行</p></li><li><p>进入 ts 文件所在目录</p></li><li><p>执行命令：tsc xxx.ts</p></li></ul></li></ol><h2 id="3-基本类型"><a href="#3-基本类型" class="headerlink" title="3.基本类型"></a>3.基本类型</h2><ul><li><p>类型声明</p><ul><li>类型声明是 TS 非常重要的一个特点</li><li>通过类型声明可以指定 TS 中变量（参数、形参）的类型</li><li>指定类型后，当为变量赋值时，TS 编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</li><li>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</li><li>语法：</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>自动类型判断</p><ul><li>TS 拥有自动的类型判断机制</li><li><font color='red'>当对变量的声明和赋值是同时进行的，TS 编译器会自动判断变量的类型</font></li><li>所以如果你的变量的声明和赋值时同时进行的，可以<strong>省略掉类型声明</strong></li></ul></li><li><p>类型：</p></li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182302755.png"></p><ul><li>number</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: number = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>: number = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>: number = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>: number = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">big</span>: bigint = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure><ul><li>boolean</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: boolean = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><ul><li>string</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: string = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fullName</span>: string = <span class="string">`Bob Bobbington`</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: number = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>: string = <span class="string">`Hello, my name is <span class="subst">$&#123;fullName&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure><ul><li><p>字面量</p><ul><li>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="string">&quot;red&quot;</span> | <span class="string">&quot;blue&quot;</span> | <span class="string">&quot;black&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br></pre></td></tr></table></figure><ul><li><p>any</p><ul><li>当类型设置为 any，会关闭<strong>类型检测</strong></li><li>当 any 类型赋值给其他类型的变量，该变量也会被关闭类型检测</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: any = <span class="number">4</span>;</span><br><span class="line">d = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">d = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><ul><li><p>unknown</p><ul><li>unknown 是<strong>安全类型的 any</strong></li><li>当 unknown 赋值给一个确定类型，类型检测会报错</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: unknown = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>void</p><ul><li>返回值为空</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="keyword">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><ul><li><p>never</p><ul><li>没有返回值，必定会报错</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: string</span>): never &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>object</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: object = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj1</span>: &#123; <span class="attr">name</span>: string, age?: number &#125;; <span class="comment">//name属性必须有，age属性可选</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj2</span>: &#123; <span class="attr">name</span>: string, [<span class="attr">propName</span>: string]: any &#125;; <span class="comment">//name属性必须有，其他属性任意</span></span><br></pre></td></tr></table></figure><ul><li>array</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="title class_">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><ul><li><p>tuple</p><ul><li>元组：固定长度的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: [string, number];</span><br><span class="line">x = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>];</span><br></pre></td></tr></table></figure></li><li><p>enum</p><ul><li>枚举：枚举值</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"></span><br><span class="line">enum <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"></span><br><span class="line">enum <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">Blue</span> = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br></pre></td></tr></table></figure><ul><li><p>类型断言</p><ul><li><p>有些情况下，<strong>变量的类型对于我们来说是很明确，但是 TS 编译器却并不清楚</strong>，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: unknown = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: number = (someValue <span class="keyword">as</span> string).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li><li><p>第二种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: unknown = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: number = (&lt;string&gt;someValue).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type myType：<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>|<span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>:myType</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-编译选项"><a href="#4-编译选项" class="headerlink" title="4.编译选项"></a>4.编译选项</h2><ul><li><p>自动编译文件</p><ul><li>编译文件时，使用 -w 指令后，TS 编译器会<font color='red'>自动监视文件的变化</font>，并在文件发生变化时对文件进行<font color='red'>重新编译</font>。</li><li>示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.<span class="property">ts</span> -w</span><br></pre></td></tr></table></figure></li><li><p>自动编译整个项目</p><ul><li><p><font color='red'>如果直接使用 tsc 指令，则可以自动将当前项目下的所有 ts 文件编译为 js 文件</font>。</p></li><li><p>但是能直接使用 tsc 命令的前提时，要先在项目根目录下创建一个 ts 的配置文件 <code>tsconfig.json</code></p></li><li><p>tsconfig.json 是一个 JSON 文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</p></li><li><p>配置选项：</p><ul><li><p>include</p><ul><li><p>定义希望被编译文件所在的目录</p></li><li><p>默认值：[“**&#x2F;*“]</p></li><li><p>示例：</p><ul><li><p><code>&quot;include&quot;:[&quot;src/**/*&quot;, &quot;tests/**/*&quot;]</code></p></li><li><p>上述示例中，所有 src 目录和 tests 目录下的文件都会被编译</p></li><li><p><font color='red'>*：表示任意文件，**：表示任意目录</font></p></li></ul></li></ul></li><li><p>exclude</p><ul><li><p>定义需要排除在外的目录</p></li><li><p>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p></li><li><p>示例：</p><ul><li><p><code>&quot;exclude&quot;: [&quot;./src/hello/**/*&quot;]</code></p></li><li><p>上述示例中，src 下 hello 目录下的文件都不会被编译</p></li></ul></li></ul></li><li><p>extends</p><ul><li><p>定义被继承的配置文件</p></li><li><p>示例：</p><ul><li><code>&quot;extends&quot;: &quot;./configs/base&quot;</code></li><li>上述示例中，当前配置文件中会自动包含 config 目录下 base.json 中的所有配置信息</li></ul></li></ul></li><li><p>files</p><ul><li><p>指定被编译文件的列表，只有需要编译的文件少时才会用到</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;core.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sys.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;types.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scanner.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parser.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;utilities.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;binder.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;checker.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tsc.ts&quot;</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><ul><li>列表中的文件都会被 TS 编译器所编译</li></ul></li><li><p>compilerOptions</p><ul><li><p>编译选项是配置文件中非常重要也比较复杂的配置选项</p></li><li><p>在 compilerOptions 中包含多个子选项，用来完成对编译的配置</p><ul><li><p>项目选项</p><ul><li><p>target</p><ul><li><p>设置 ts 代码编译的目标版本</p></li><li><p>可选值：</p><ul><li>ES3（默认）、ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li></ul></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES6&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如上设置，我们所编写的 ts 代码将会被编译为 ES6 版本的 js 代码</li></ul></li></ul></li><li><p>lib</p><ul><li><p>指定代码运行时所包含的库（宿主环境）</p></li><li><p>可选值：</p><ul><li>ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li></ul></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;ES6&quot;</span>, <span class="string">&quot;DOM&quot;</span>],</span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;dist/aa.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>module</p><ul><li><p>设置编译后代码使用的模块化系统</p></li><li><p>可选值：</p><ul><li>CommonJS（默认）、UMD、AMD、System、ES2020、ESNext、None</li></ul></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;CommonJS&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>outDir</p><ul><li><p>编译后文件的所在目录</p></li><li><p>默认情况下，编译后的 js 文件会和 ts 文件位于相同的目录，设置 outDir 后可以改变编译后文件的位置</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置后编译后的 js 文件将会生成到 dist 目录</li></ul></li></ul></li><li><p>outFile</p><ul><li><p>将所有的文件编译为一个 js 文件</p></li><li><p><font color='red'>默认会将所有的编写在全局作用域中的代码合并为一个 js 文件</font></p></li><li><p>如果想使用模块化然后合并到一个文件中，如果 module 制定了 None、System 或 AMD 则会将模块一起合并到文件之中</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;dist/app.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>rootDir</p><ul><li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过 rootDir 可以手动指定根目录</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;rootDir&quot;</span>: <span class="string">&quot;./src&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>allowJs</p><ul><li>是否对 js 文件编译，默认是 false</li></ul></li><li><p>checkJs</p><ul><li><p>是否对 js 文件进行检查，默认是 false</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;checkJs&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>removeComments</p><ul><li>是否删除注释</li><li>默认值：false</li></ul></li><li><p>noEmit</p><ul><li>不对代码进行编译</li><li>默认值：false</li></ul></li><li><p>sourceMap</p><ul><li>是否生成 sourceMap</li><li>默认值：false</li></ul></li></ul></li><li><p>严格检查</p><ul><li><p>strict</p><ul><li><font color='red'>启用所有的严格检查</font>，默认值为 true，设置后相当于开启了所有的严格检查</li></ul></li><li><p>alwaysStrict</p><ul><li>总是以严格模式对代码进行编译</li><li>使用模块化，就会自动打开严格模式</li></ul></li><li><p><font color='blue'>noImplicitAny</font></p><ul><li>禁止隐式的 any 类型</li></ul></li><li><p>noImplicitThis</p><ul><li><p>禁止类型不明确的 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sort</span>(<span class="params"><span class="variable language_">this</span>: any</span>) &#123;</span><br><span class="line">  <span class="comment">//这样就不会报错</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>strictBindCallApply</p><ul><li>严格检查 bind、call 和 apply 的参数列表</li></ul></li><li><p>strictFunctionTypes</p><ul><li>严格检查函数的类型</li></ul></li><li><p>strictNullChecks</p><ul><li><strong>严格的空值检查</strong></li></ul></li><li><p>strictPropertyInitialization</p><ul><li>严格检查属性是否初始化</li></ul></li></ul></li><li><p>额外检查</p><ul><li>noFallthroughCasesInSwitch<ul><li>检查 switch 语句包含正确的 break</li></ul></li><li>noImplicitReturns<ul><li>检查函数没有隐式的返回值</li></ul></li><li>noUnusedLocals<ul><li>检查未使用的局部变量</li></ul></li><li>noUnusedParameters<ul><li>检查未使用的参数</li></ul></li></ul></li><li><p>高级</p><ul><li>allowUnreachableCode<ul><li>检查不可达代码</li><li>可选值：<ul><li>true，忽略不可达代码</li><li>false，不可达代码将引起错误</li></ul></li></ul></li><li>noEmitOnError<ul><li><font color='red'>有错误的情况下不进行编译</font></li><li>默认值：false</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="5-webpack"><a href="#5-webpack" class="headerlink" title="5.webpack"></a>5.webpack</h2><ul><li><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行<strong>打包</strong>，TS 同样也可以结合构建工具一起使用，下边以 webpack 为例介绍一下如何结合构建工具使用 TS。</p></li><li><p>步骤：</p><ol><li><p>初始化项目</p><ul><li>进入项目根目录，执行命令 <code> npm init -y</code><ul><li>主要作用：创建 package.json 文件</li></ul></li></ul></li><li><p>下载构建工具</p><ul><li><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader html-webpack-plugin</code> （6 个）<ul><li>共安装了 7 个包<ul><li>webpack<ul><li>构建工具 webpack</li></ul></li><li>webpack-cli<ul><li>webpack 的命令行工具</li></ul></li><li>webpack-dev-server<ul><li>webpack 的开发服务器</li><li>在 package.json 中添加一个命令，”start”:”webpack serve –open chrome.exe”</li></ul></li><li>typescript<ul><li>ts 编译器</li></ul></li><li>ts-loader<ul><li>ts 加载器，用于在 webpack 中编译 ts 文件</li></ul></li><li>html-webpack-plugin<ul><li>webpack 中 html 插件，用来<strong>自动创建 html 文件</strong></li></ul></li><li>clean-webpack-plugin（webpack5 不用这个插件，在 output 里写 clean：true）<ul><li>webpack 中的清除插件，每次构建都会先清除目录</li></ul></li></ul></li></ul></li></ul></li><li><p>根目录下创建 webpack 的配置文件 webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">//const &#123; CleanWebpackPlugin &#125; = require(&quot;clean-webpack-plugin&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//optimization:&#123;</span></span><br><span class="line">        <span class="comment">//minimize: false // 关闭代码压缩，可选</span></span><br><span class="line">    <span class="comment">//&#125;,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//devtool: &quot;inline-source-map&quot;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//devServer: &#123;</span></span><br><span class="line">        <span class="comment">//contentBase: &#x27;./dist&#x27;</span></span><br><span class="line">    <span class="comment">//&#125;,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span> <span class="comment">// 关闭webpack的箭头函数，可选</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//用来设置引用模块</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                <span class="attr">use</span>: &#123;</span><br><span class="line">                   <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">//new CleanWebpackPlugin(),</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;TS测试&#x27;</span>，</span><br><span class="line">            <span class="comment">//网页的模板</span></span><br><span class="line">            <span class="attr">template</span>:<span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">clean</span>:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根目录下创建 tsconfig.json，配置可以根据自己需要</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 package.json 添加如下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...略...</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --open&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 src 下创建 ts 文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器</p></li></ol></li></ul><p><strong>总结：</strong></p><ul><li>npm init -y：初始化打包项目</li><li>安装依赖：<code>npm i -D webpack webpack-cli typescript ts-loader html-webpack-plugin webpack-dev-server </code></li><li>编写<code>webpack.config.js</code>的配置文件</li><li>编写<code>tsconfig.json</code>的配置文件</li><li>修改<code>package.json</code>，加上一个<code>bulid</code>的指令，进行<code>webpack</code>；添加<code>start</code>指令，进行<code>webpack server --open</code></li></ul><h2 id="6-Babel"><a href="#6-Babel" class="headerlink" title="6.Babel"></a>6.Babel</h2><ul><li><p>经过一系列的配置，使得 TS 和 webpack 已经结合到了一起，除了 webpack，开发中还经常需要结合 babel 来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将 babel 引入到项目中。</p><ol><li><p>安装依赖包：</p><ul><li><code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code></li><li>共安装了 4 个包，分别是：<ul><li>@babel&#x2F;core<ul><li>babel 的核心工具</li></ul></li><li>@babel&#x2F;preset-env<ul><li>babel 的预定义环境</li></ul></li><li>@babel-loader<ul><li>babel 在 webpack 中的加载器</li></ul></li><li>core-js<ul><li>core-js 用来使老版本的浏览器支持新版 ES 语法</li></ul></li></ul></li></ul></li><li><p>修改 webpack.config.js 配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">...略...</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                    <span class="attr">options</span>:&#123;</span><br><span class="line">                        <span class="attr">presets</span>: [</span><br><span class="line">                            [</span><br><span class="line">                                <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="string">&quot;targets&quot;</span>:&#123;</span><br><span class="line">                                        <span class="string">&quot;chrome&quot;</span>: <span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    <span class="string">&quot;corejs&quot;</span>:<span class="string">&quot;3&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>,</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure><ul><li>如此一来，使用 ts 编译后的文件将会再次被 babel 处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的 targets 中指定要兼容的浏览器版本。</li></ul></li></ol></li></ul><h2 id="7-面向对象"><a href="#7-面向对象" class="headerlink" title="7.面向对象"></a>7.面向对象</h2><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。</p><ul><li>举例来说：<ul><li>操作浏览器要使用 window 对象</li><li>操作网页要使用 document 对象</li><li>操作控制台要使用 console 对象</li></ul></li></ul><p>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</p><p>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p><h3 id="1-类（class）"><a href="#1-类（class）" class="headerlink" title="1.类（class）"></a>1.类（class）</h3><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过 Person 类来创建人的对象，通过 Dog 类创建狗的对象，通过 Car 类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li><p>定义类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 &#123;</span><br><span class="line">属性名: 类型;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">参数: 类型</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.属性名 = 参数;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法名()&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-面向对象的特点"><a href="#2-面向对象的特点" class="headerlink" title="2.面向对象的特点"></a>2.面向对象的特点</h3><ul><li><p>封装</p><ul><li><p>对象实质上就是<font color='red'>属性和方法的容器</font>，它的主要作用就是存储属性和方法，这就是所谓的<strong>封装</strong></p></li><li><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在 TS 中可以对属性的权限进行设置</p></li><li><p>只读属性（readonly）：</p><ul><li>如果在声明属性时添加一个 readonly，则属性便成了只读属性<strong>无法修改</strong></li></ul></li><li><p>TS 中属性具有三种修饰符：</p><ul><li>public（默认值），可以在<font color='red'>类、子类和对象中修改</font></li><li><font color='cornflowerblue'>protected ，可以在类、子类中修改</font></li><li><font color='cornflowerblue'>private ，可以在类中修改</font></li></ul></li><li><p>示例：</p><ul><li><p>public</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    public <span class="attr">name</span>: string; <span class="comment">// 写或什么都不写都是public</span></span><br><span class="line">    public <span class="attr">age</span>: number;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以在类中修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 可以通过对象修改</span></span><br></pre></td></tr></table></figure></li><li><p>protected</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    protected <span class="attr">name</span>: string;</span><br><span class="line">    protected <span class="attr">age</span>: number;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure></li><li><p>private</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    private <span class="attr">name</span>: string;</span><br><span class="line">    private <span class="attr">age</span>: number;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中不能修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>属性存取器</p><ul><li><p>对于一些不希望被任意修改的属性，可以将其设置为 private</p></li><li><p><font color='red'>直接将其设置为 private 将导致无法再通过对象修改其中的属性</font></p></li><li><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p></li><li><p>读取属性的方法叫做 setter 方法，设置属性的方法叫做 getter 方法</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    private <span class="attr">_name</span>: string;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name: string</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>); <span class="comment">// 通过getter读取name属性</span></span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>; <span class="comment">// 通过setter修改name属性</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>静态属性</p><ul><li><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p></li><li><p>静态属性（方法）使用 static 开头</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tools</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">sum</span>(<span class="params">num1: number, num2: number</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Tools</span>.<span class="property">PI</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Tools</span>.<span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>this</p><ul><li>在类中，使用 this 表示当前对象</li></ul></li></ul></li><li><p>继承</p><ul><li><p>继承时面向对象中的又一个特性</p></li><li><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><ul><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>, <span class="number">4</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过继承可以在不修改类的情况下完成对类的扩展</p></li><li><p>重写</p><ul><li><p>发生继承时，如果<strong>子类中的方法会替换掉父类中的同名方法</strong>，这就称为方法的重写</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类中的run方法！`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类中的run方法，会重写父类中的run方法！`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>, <span class="number">4</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure><ul><li>在子类中可以使用 super 来完成对父类的引用</li></ul></li></ul></li><li><p>抽象类（abstract class）</p><ul><li><p>抽象类是<font color='red'>专门用来被其他类所继承的类</font>，它只能被其他类所继承<font color='red'>不能用来创建实例</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    abstract <span class="title function_">run</span>(): <span class="keyword">void</span>;<span class="comment">//抽象方法，没有方法体，需要设置返回值类型</span></span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;  <span class="comment">//定义了也没有用，因为不能实例对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animals</span>&#123;  <span class="comment">//继承了抽象类，必须重写里面的抽象方法</span></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;狗在跑~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 abstract 开头的方法叫做抽象方法，<font color='red'>抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现</font></p></li></ul></li></ul></li></ul><h3 id="3-接口（Interface）"><a href="#3-接口（Interface）" class="headerlink" title="3.接口（Interface）"></a>3.接口（Interface）</h3><p>接口的作用类似于抽象类，不同点在于<strong>接口中的所有方法和属性都是没有实值的</strong>，换句话说接口中的所有方法都是<strong>抽象方法</strong>。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去<strong>实现</strong>接口，实现接口时类中要保护接口中的所有属性。</p><p>接口就是定义了一个规范</p><ul><li><p>示例（检查对象类型）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">//接口用于规定类的结构，限制类中包含哪些属性和方法</span></span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="title function_">sayHello</span>(): <span class="keyword">void</span>; <span class="comment">//也可以当做类型声明使用，</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">per: Person</span>) &#123;</span><br><span class="line">  per.<span class="title function_">sayHello</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, 我是 <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>示例（实现）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">    <span class="title function_">sayHello</span>():<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> implements <span class="title class_">Person</span>&#123;  <span class="comment">//类实现一个接口</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">public name: string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="接口与类型声明的不同"><a href="#接口与类型声明的不同" class="headerlink" title="接口与类型声明的不同"></a>接口与类型声明的不同</h4><ul><li>类型声明<code>type myType=&#123;&#125;</code>,不能重复声明；但是接口<code>interface myInterface&#123;&#125;</code>可以重复声明，重复声明后会整合所有的</li><li>接口可以在声明类时，限制类的结构，接口中的所有属性都不能有实际值（有抽象类类似），所有方法都是抽象方法</li></ul><h3 id="4-泛型（Generic）"><a href="#4-泛型（Generic）" class="headerlink" title="4.泛型（Generic）"></a>4.泛型（Generic）</h3><p><font color='cornflowerblue'>在类型不明确时，规定一个变量，用这个变量，表示类型</font></p><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。（<strong>泛型就是不确定的类型</strong>）</p><ul><li><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">arg: any</span>): any &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>上例中，test 函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了 any，但是很明显这样做是不合适的，首先使用 any 会关闭 TS 的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</p></li><li><p>使用泛型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> test&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="comment">//跳过类型检测，参数和返回值类型相同</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里的<code>&lt;T&gt;</code>就是泛型，T 是我们给这个类型起的名字（不一定非叫 T），设置泛型后即可在函数中使用 T 来表示该类型。所以泛型其实很好理解，就<strong>表示某个类型</strong>。</p></li><li><p>那么如何使用上边的函数呢？</p><ul><li><p>方式一（直接使用）：</p><ul><li><code>test(10)</code></li><li>使用时可以直接传递参数使用，类型会由 TS<strong>自动推断出来</strong>，但有时编译器无法自动推断时还需要使用下面的方式</li></ul></li><li><p>方式二（指定类型）：</p><ul><li><code>test&lt;number&gt;(10)</code></li><li>也可以在函数后手动指定泛型</li></ul></li></ul></li><li><p>可以<strong>同时指定多个泛型</strong>，泛型间使用逗号隔开：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> test&lt;T, K&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K): K &#123;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &lt; number, string &gt; (<span class="number">10</span>, <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>使用泛型时，完全可以将泛型当成是一个普通的类去使用</li></ul></li><li><p><strong>类中同样可以使用泛型</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">prop</span>: T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">prop: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prop</span> = prop;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>除此之外，也可以<strong>对泛型的范围进行约束</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">MyInter</span>&#123;</span><br><span class="line">    <span class="attr">length</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> test&lt;T <span class="keyword">extends</span> <span class="title class_">MyInter</span>&gt;(<span class="attr">arg</span>: T): number&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;123&quot;</span>)<span class="comment">//可以，因为有length属性</span></span><br><span class="line"><span class="title function_">test</span>(<span class="number">123</span>)<span class="comment">//不可以</span></span><br><span class="line"><span class="title function_">test</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;hhh&quot;</span>&#125;)<span class="comment">//不可以</span></span><br><span class="line"><span class="title function_">test</span>(&#123;<span class="attr">length</span>:<span class="number">10</span>&#125;)<span class="comment">//可以</span></span><br></pre></td></tr></table></figure><ul><li>使用 T extends MyInter 表示泛型 T<strong>必须是 MyInter 的实现类（子类）</strong>，不一定非要使用接口类，抽象类同样适用。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2022/05/06/git/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/06/git/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-学习笔记"><a href="#Git-学习笔记" class="headerlink" title="Git 学习笔记"></a>Git 学习笔记</h2><p>主要学习来源：<a href="https://www.bilibili.com/video/BV1MU4y1Y7h5">黑马</a></p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>一般来说，团队合作开发的话，每个人都需要在自己的功能分支 <strong>feat&#x2F;XXX</strong> 上开发，最后一起合并到总的开发分支 <code>dev</code>上，然后将开发分支 <strong>dev</strong> 合并到测试分支上，最后将测试分支合并到正式发布分支上。</p><p>其中总的开发分支一般叫做 <strong>dev</strong> 分支，正式发布分支一般是叫 <strong>main&#x2F;master&#x2F;release</strong> 分支。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071625846.png"></p><p>比如说有 A、B、C 三个人协助进行功能开发：</p><ol><li>首先 A、B、C 三位小伙伴从总开发分支 Dev 上开辟自己的功能分支，分别是 feat&#x2F;AXXX、feat&#x2F;BXXX、feat&#x2F;CXXX，也就是图中 feat&#x2F;AXXX、feat&#x2F;BXXX、feat&#x2F;CXXX 的三条线；</li><li>然后在自己的开发机上进行开发，这里的开发机可以是本地环境也可以是一些云端的开发机。开发完毕后，再分别合到总开发分支 dev 上，也就是图中蓝色的三条线，在这个过程中可能会产生一些代码冲突，挨个 solve 即可；</li><li>接着在 dev 分支上确认所有功能开发完毕，进行简单自测，fix 一些 bug 后再向测试分支上进行合并；</li><li>这个时候就可以艾特测试组的同学来进行测试，测试通过后再合到 master 分支进行发布。</li></ol><p>一般来说，基本的流程就是这样的，不同公司或许其中流程有些出入，不过问题不大，大致方向是如此的。</p><h2 id="2-概述"><a href="#2-概述" class="headerlink" title="2 概述"></a>2 概述</h2><h3 id="2-1-版本控制的方式"><a href="#2-1-版本控制的方式" class="headerlink" title="2.1 版本控制的方式"></a>2.1 版本控制的方式</h3><ul><li>集中式版本控制工具：集中式版本控制工具，版本库是集中存放在中央服务器的，team 里每个人 work 时从中央服务器下载代码，是必须联网才能工作，局域网或互联网。个人修改后然后提交到中央版本库。<ul><li>举例：SVN 和 CVS</li></ul></li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071625510.png"></p><ul><li>分布式版本控制工具：分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样工作的时候，无需要联网了，因为版本库就在你自己的电脑上。多人协作只需要各自的修改推送给对方，就能互相看到对方的修改了。<ul><li>举例：Git</li></ul></li></ul><h3 id="2-2-Git"><a href="#2-2-Git" class="headerlink" title="2.2 Git"></a>2.2 Git</h3><p>Git 是分布式的，Git 不需要有中心服务器，我们每台电脑拥有的东西都是一样的。我们使用 Git 并且有个中心服务器，仅仅是为了方便交换大家的修改，但是这个服务器的地位和我们每个人的 PC 是一样的。我们可以把它当做一个开发者的 pc 就可以就是为了大家代码容易交流不关机用的。没有它大家一样可以工作，只不过“交换”修改不方便而已。</p><p>git 是一个<strong>开源的分布式版本控制系统</strong>，可以有效、高速地处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众多的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002 年间）。到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代 码。</p><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标：</p><ul><li>速度</li><li>简单的设计</li><li>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</li><li>完全分布式</li><li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071625954.png"></p><h3 id="2-3-Git-工作流程"><a href="#2-3-Git-工作流程" class="headerlink" title="2.3 Git 工作流程"></a>2.3 Git 工作流程</h3><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071625348.png"></p><p>命令如下：</p><ol><li>clone（克隆）: 从远程仓库中克隆代码到本地仓库</li><li>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</li><li>add（添加）: 在提交前先将代码提交到暂存区</li><li>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</li><li>fetch (抓取) ： 从远程库抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</li><li>pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于<br>fetch+merge</li><li>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</li></ol><h2 id="3-Git-安装与常用命令"><a href="#3-Git-安装与常用命令" class="headerlink" title="3 Git 安装与常用命令"></a>3 Git 安装与常用命令</h2><p>Git 命令例子都是在<strong>Git Bash</strong>中演示的，会用到一些基本的<strong>linux</strong>命令。</p><h3 id="3-1-Git-环境配置"><a href="#3-1-Git-环境配置" class="headerlink" title="3.1 Git 环境配置"></a>3.1 Git 环境配置</h3><h4 id="3-1-1-基本配置"><a href="#3-1-1-基本配置" class="headerlink" title="3.1.1 基本配置"></a>3.1.1 基本配置</h4><p><strong>下载安装</strong></p><p>安装完成后，在电脑桌面（也可以是其他目录）点击右键，如果能够看到如下两个菜单则说明 Git 安装成功。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071625277.png"></p><ul><li><p>Git GUI：Git 提供的图形界面工具</p></li><li><p>Git Bash：Git 提供的命令行工具</p></li></ul><p>当安装 Git 后首先要做的事情是设置用户名称和 email 地址。这是非常重要的，因为每次 Git 提交都会使用该用户信息。</p><p><strong>基本配置</strong></p><ul><li>设置用户信息</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;XXX&quot;</span> <span class="comment"># 设置用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;XXXX&quot;</span> <span class="comment"># 设置邮箱</span></span><br></pre></td></tr></table></figure><ul><li>查看配置信息</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><h4 id="3-1-2-为常用指令配置别名"><a href="#3-1-2-为常用指令配置别名" class="headerlink" title="3.1.2 为常用指令配置别名"></a>3.1.2 为常用指令配置别名</h4><p>有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。</p><ul><li><p>打开用户目录，创建 .bashrc 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071625839.png"></p><ul><li>在 .bashrc 文件中输入如下内容：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于输出git提交日志</span></span><br><span class="line"><span class="built_in">alias</span> git-log=<span class="string">&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span></span><br><span class="line"><span class="comment">#用于输出当前目录所有文件及基本信息</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -al&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071625220.png"></p><p><strong>注意</strong>：vi 退出编辑时，按 esc，输入冒号（英文），然后切换到最后一行模式，最后一行模式决定是否保存文件。例如输入 wq 保存并退出。</p><ul><li>打开 gitBash，执行：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="3-2-创建本地仓库"><a href="#3-2-创建本地仓库" class="headerlink" title="3.2 创建本地仓库"></a>3.2 创建本地仓库</h3><p>要使用 Git 对我们的代码进行版本控制，首先需要获得本地仓库</p><ol><li><p>在电脑的任意位置创建一个空目录（例如 test）作为我们的本地 Git 仓库</p></li><li><p>进入这个目录中，点击右键打开 Git bash 窗</p></li><li><p>执行命令 git init</p></li><li><p>如果创建成功后可在文件夹下看到隐藏的.git 目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071626298.png"></p></li></ol><h3 id="3-3-基础操作指令"><a href="#3-3-基础操作指令" class="headerlink" title="3.3 基础操作指令"></a>3.3 基础操作指令</h3><p>Git 工作目录下对于文件的修改(增加、删除、更新)会存在几个状态，这些修改的状态会随着我们执行 Git 的命令而发生变化。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071626428.png"></p><p>本章节主要讲解如何使用命令来控制这些状态之间的转换：</p><ol><li>git add (工作区 —&gt; 暂存区)</li><li>git commit (暂存区 —&gt; 本地仓库)</li></ol><h4 id="3-3-1-status-查看修改的状态"><a href="#3-3-1-status-查看修改的状态" class="headerlink" title="3.3.1 status 查看修改的状态"></a>3.3.1 status 查看修改的状态</h4><p>作用：查看修改的状态（暂存区、工作区）</p><p>命令形式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h4 id="3-3-2-add-添加工作区到暂存区"><a href="#3-3-2-add-添加工作区到暂存区" class="headerlink" title="3.3.2 add 添加工作区到暂存区"></a>3.3.2 add 添加工作区到暂存区</h4><ul><li>作用：添加工作区一个或多个文件的修改到暂存区</li><li>命令形式：git add 单个文件名|通配符</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add file.txt <span class="comment"># 添加单个文件</span></span><br><span class="line">git add . <span class="comment"># 将所有修改加入暂存区</span></span><br></pre></td></tr></table></figure><h4 id="3-3-3-commit-提交暂存区到本地仓库"><a href="#3-3-3-commit-提交暂存区到本地仓库" class="headerlink" title="3.3.3 commit 提交暂存区到本地仓库"></a>3.3.3 commit 提交暂存区到本地仓库</h4><ul><li>作用：提交暂存区内容到本地仓库的当前分支</li><li>命令形式：git commit -m ‘注释内容’</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;XXX update&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-4-log-查看提交日志"><a href="#3-3-4-log-查看提交日志" class="headerlink" title="3.3.4 log 查看提交日志"></a>3.3.4 log 查看提交日志</h4><p>配置的别名 git-log 就包含了这些参数，所以后续可以直接使用指令 git-log</p><ul><li><p>作用:查看提交记录</p></li><li><p>命令形式：git log [option] 或者 git-log</p><ul><li>—all 显示所有分支</li><li>—pretty&#x3D;oneline 将提交信息显示为一行</li><li>—abbrev-commit 使得输出的 commitId 更简短</li><li>—graph 以图的形式显示</li></ul></li></ul><h4 id="3-3-5-版本回退"><a href="#3-3-5-版本回退" class="headerlink" title="3.3.5 版本回退"></a>3.3.5 版本回退</h4><ul><li>作用：版本切换</li><li>命令形式：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commitID <span class="comment"># commitID 可以使用 git-log 或 git log 指令查看</span></span><br></pre></td></tr></table></figure><h4 id="3-3-6-添加文件至忽略列表"><a href="#3-3-6-添加文件至忽略列表" class="headerlink" title="3.3.6 添加文件至忽略列表"></a>3.3.6 添加文件至忽略列表</h4><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如<strong>日志文件</strong>，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中创建一个名为 <code>.gitignore</code> 的文件（文件名称固定），列出要忽略的文件模式。</p><h4 id="3-3-7-命令使用示例"><a href="#3-3-7-命令使用示例" class="headerlink" title="3.3.7 命令使用示例"></a>3.3.7 命令使用示例</h4><ul><li>利用上面初始化好的本地仓库 test，新建一个文件 file01.txt，并用 status 查看状态：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> file01.txt</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071626231.png"></p><ul><li>添加到暂存区</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add file01.txt</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071626523.png"></p><ul><li>提交至本地仓库并查看状态</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit file01.txt&quot;</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071626214.png"></p><ul><li>查看日志</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071627765.png"></p><ul><li>修改 file01.txt 文件内容并查看状态</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071627610.png"></p><ul><li>添加至暂存区并查看状态</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071627075.png"></p><ul><li>提交至本地仓库并查看日志</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071627249.png"></p><ul><li>利用 git-log 查看提交日志，并回退至第一个版本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git-log</span><br><span class="line">git reset --hard XXXXX</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071627961.png"></p><p>点击打开<code>file01.txt</code>，发现其中内容没有了。</p><p>同样，可以再次回到第二个版本：</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071627123.png"></p><ul><li>新建文件 file02.txt，加入.gitignore 中</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> file02.txt</span><br><span class="line"><span class="built_in">touch</span> .gitignore</span><br><span class="line">vi .gitignore <span class="comment"># 添加内容： file02.txt</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>.gitignore内容</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file02.txt</span><br><span class="line">也可以使用通配符，例如</span><br><span class="line">*.txt</span><br><span class="line">*.iml</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-4-分支"><a href="#3-4-分支" class="headerlink" title="3.4 分支"></a>3.4 分支</h3><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的 Bug 修改、开发新的功能，以免影响开发主线。</p><h4 id="3-4-1-查看本地分支"><a href="#3-4-1-查看本地分支" class="headerlink" title="3.4.1 查看本地分支"></a>3.4.1 查看本地分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h4 id="3-4-2-创建本地分支"><a href="#3-4-2-创建本地分支" class="headerlink" title="3.4.2 创建本地分支"></a>3.4.2 创建本地分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><h4 id="3-4-3-切换分支"><a href="#3-4-3-切换分支" class="headerlink" title="3.4.3 切换分支"></a>3.4.3 切换分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><p>我们还可以直接切换到一个不存在的分支（创建并切换）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure><h4 id="3-4-4-合并分支"><a href="#3-4-4-合并分支" class="headerlink" title="3.4.4 合并分支"></a>3.4.4 合并分支</h4><p>一个分支上的提交可以合并到另一个分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure><h4 id="3-4-5-删除分支"><a href="#3-4-5-删除分支" class="headerlink" title="3.4.5 删除分支"></a>3.4.5 删除分支</h4><p>不能删除当前分支，只能删除其他分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名 <span class="comment"># 删除分支时，需要做各种检查</span></span><br><span class="line"></span><br><span class="line">git branch -D 分支名 <span class="comment"># 不做任何检查，强制删除</span></span><br></pre></td></tr></table></figure><h4 id="3-4-6-解决冲突"><a href="#3-4-6-解决冲突" class="headerlink" title="3.4.6 解决冲突"></a>3.4.6 解决冲突</h4><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：</p><ol><li>处理文件中冲突的地方</li><li>将解决完冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ol><h4 id="3-4-7-开发中分支使用原则与流程"><a href="#3-4-7-开发中分支使用原则与流程" class="headerlink" title="3.4.7 开发中分支使用原则与流程"></a>3.4.7 开发中分支使用原则与流程</h4><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的 Bug 修改、开发新的功能，以免影响开发主线。</p><p>在开发中，一般有如下分支使用原则与流程：</p><ol><li>master （生产） 分支：线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；</li><li>develop（开发）分支：是从 master 创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到 master 分支，准备上线。</li><li>feature&#x2F;xxxx 分支：从 develop 创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到 develop 分支，之后该分支可以删除。</li><li>hotfix&#x2F;xxxx 分支：从 master 派生的分支，一般作为线上 bug 修复使用，修复完成后需要合并到 master、test、develop 分支。</li></ol><p>还有一些其他分支，在此不再详述，例如 test 分支（用于代码测试）、pre 分支（预上线分支）等<br>等。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071628802.png"></p><h4 id="3-4-8-命令使用示例"><a href="#3-4-8-命令使用示例" class="headerlink" title="3.4.8 命令使用示例"></a>3.4.8 命令使用示例</h4><h5 id="1）-示例-1"><a href="#1）-示例-1" class="headerlink" title="1） 示例 1"></a>1） 示例 1</h5><p>查看分支，并新建分支 dev01</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch dev01</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071628551.png"></p><p>其中<strong>HEAD</strong>指向的是当前工作区所处的分支，例如此时处在<strong>master</strong>的分支上。</p><ul><li>将上一节中的<code>.gitignore</code>提交，并查看分支：</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071628039.png"></p><ul><li>将当前分支切换到 dev01</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev01</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071628556.png"></p><p>同时观察到，test 目录下的.gitignore 消失了</p><ul><li>重新切换到 master 分支，.gitignore 又出现了。新建分支 dev02，并同时切换到上面</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev02</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071628878.png"></p><ul><li>切换到 dev01 分支，并新建文件 file03.txt，并提交</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071628090.png"></p><ul><li>切换到 master 分支，并将 dev01 的提交合并到 master 上</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev01</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071628975.png"></p><p>此时，可以看到在 master 分支下的仓库中，有了 file03.txt</p><ul><li>删除 dev02 分支</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev02</span><br></pre></td></tr></table></figure><h5 id="2）-示例-2——解决冲突"><a href="#2）-示例-2——解决冲突" class="headerlink" title="2） 示例 2——解决冲突"></a>2） 示例 2——解决冲突</h5><ul><li>删除分支 dev01，创建并切换到分支 dev 上。此时 master 和 dev 分支上的 file01.txt 文件中内容都为 update_count &#x3D; 1</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev01</span><br><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071628527.png"></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071628067.png"></p><ul><li>在 dev 分支上修改 file01.txt 文件内容为 update_count &#x3D; 2，并提交</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071629165.png"></p><ul><li>在 master 分支上修改 file01.txt 文件内容为 update_count &#x3D; 3，并提交</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071629235.png"></p><ul><li>将 dev 分支合并到 master 分支上，发现报错。查看 file01.txt 内容</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071629181.png"></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071629396.png"></p><ul><li>解决冲突：将<code>file01.txt</code>提示冲突的地方修改成我们想要的内容，例如再次修改成<code>update_count = 3</code>，并再次提交即可。</li></ul><h2 id="4-Git-远程仓库"><a href="#4-Git-远程仓库" class="headerlink" title="4 Git 远程仓库"></a>4 Git 远程仓库</h2><h3 id="4-1-常用的托管服务"><a href="#4-1-常用的托管服务" class="headerlink" title="4.1 常用的托管服务"></a>4.1 常用的托管服务</h3><p>前面我们已经知道了 Git 中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建 Git 远程仓库呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有 GitHub、码云、GitLab 等。</p><ul><li><p>GitHub（ 地址：<a href="https://github.com/">https://github.com/</a> ）是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub</p></li><li><p>码云（地址： <a href="https://gitee.com/">https://gitee.com/</a> ）是国内的一个代码托管平台，由于服务器在国内，所以相比于 GitHub，码云速度会更快</p></li><li><p>GitLab （地址： <a href="https://about.gitlab.com/">https://about.gitlab.com/</a> ）是一个用于仓库管理系统的开源项目，使用 Git 作为代码管理工具，并在此基础上搭建起来的 web 服务，一般用于在企业、学校等内部网络搭建 git 私服。</p></li></ul><h3 id="4-2-操作远程仓库"><a href="#4-2-操作远程仓库" class="headerlink" title="4.2 操作远程仓库"></a>4.2 操作远程仓库</h3><h4 id="4-2-1-添加远程仓库"><a href="#4-2-1-添加远程仓库" class="headerlink" title="4.2.1 添加远程仓库"></a>4.2.1 添加远程仓库</h4><p>此操作是先初始化本地库，然后与已创建的远程库进行对接。</p><ul><li><p>命令：</p><ul><li>远端名称：默认是 origin，取决于远端服务器设置</li><li>仓库地址：从远端服务器获取此 url</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;远端名称&gt; &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure><ul><li>例如：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:czbk_zhang_meng/git_test.git</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071629901.png"></p><h4 id="4-2-2-查看远程仓库"><a href="#4-2-2-查看远程仓库" class="headerlink" title="4.2.2 查看远程仓库"></a>4.2.2 查看远程仓库</h4><ul><li>命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><h4 id="4-2-3-推送到远程仓库"><a href="#4-2-3-推送到远程仓库" class="headerlink" title="4.2.3 推送到远程仓库"></a>4.2.3 推送到远程仓库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [-f] [--set-upstream][远端名称][本地分支名][:远端分支名]</span><br></pre></td></tr></table></figure><ul><li><p>命令：</p><p>如果远程分支名和本地分支名相同，则可以只写本地分支名</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br><span class="line">    + `-f`  表示强制推送，**一般在公司内没有这个的使用权限**，否则容易冲掉远程仓库的所有代码</span><br><span class="line">    + `--set-upstream` 推送到远端的同时，建立起和远端分支的关联关系。用于第一次推送时。</span><br></pre></td></tr></table></figure><ul><li>如果当前分支已经和远端分支关联，则可以省略分支名和远端名 + git push 将 master 分支推送到已关联的远端分支</li></ul><h4 id="4-2-4-本地分支与远程分支的关联关系"><a href="#4-2-4-本地分支与远程分支的关联关系" class="headerlink" title="4.2.4 本地分支与远程分支的关联关系"></a>4.2.4 本地分支与远程分支的关联关系</h4><ul><li>命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><h4 id="4-2-5-从远程仓库克隆"><a href="#4-2-5-从远程仓库克隆" class="headerlink" title="4.2.5 从远程仓库克隆"></a>4.2.5 从远程仓库克隆</h4><p>如果已经有一个远端仓库，我们可以直接 clone 到本地。</p><ul><li>命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;仓库地址&gt; [本地目录]</span><br></pre></td></tr></table></figure><p>本地目录可以省略，会自动生成一个目录</p><h4 id="4-2-6-从远程仓库中抓取和拉取"><a href="#4-2-6-从远程仓库中抓取和拉取" class="headerlink" title="4.2.6 从远程仓库中抓取和拉取"></a>4.2.6 从远程仓库中抓取和拉取</h4><p>远程分支和本地的分支一样，我们可以进行 merge 操作，只是需要先把远端仓库里的更新都下载到本地，再进行操作。</p><ul><li>抓取命令：<ul><li>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</li><li>如果不指定远端名称和分支名，则抓取所有分支。</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [remote name] [branch name]</span><br></pre></td></tr></table></figure><ul><li>拉取命令：<ul><li>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于 fetch+merge</li><li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [remote name] [branch name]</span><br></pre></td></tr></table></figure><h4 id="4-2-7-解决合并冲突"><a href="#4-2-7-解决合并冲突" class="headerlink" title="4.2.7 解决合并冲突"></a>4.2.7 解决合并冲突</h4><p>在一段时间，A、B 用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。</p><p>A 用户在本地修改代码后优先推送到远程仓库，此时 B 用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时 B 用户晚于 A 用户，故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支，如下图所示。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071629439.png"></p><p>在 B 用户拉取代码时，因为 A、B 用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。</p><p><strong>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同</strong>，在此不再赘述。</p><h3 id="4-3-命令使用示例"><a href="#4-3-命令使用示例" class="headerlink" title="4.3 命令使用示例"></a>4.3 命令使用示例</h3><h4 id="4-3-1-远程仓库添加查看推送"><a href="#4-3-1-远程仓库添加查看推送" class="headerlink" title="4.3.1 远程仓库添加查看推送"></a>4.3.1 远程仓库添加<em>查看</em>推送</h4><ul><li><p>初始化本地库（例如使用上一节创建的本地仓库 test），然后与已创建的远程库（例如创建将好一个远程仓库 git_test）进行对接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:zeng-yiming/git_test.git</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071629723.png"></p><ul><li>查看对接好的远程仓库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071630512.png"></p><p>推送到远程仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>因为本地分支名 master 和远程分支名 master 同名，所以省略了远程分支名，完整的指令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master:master</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071630933.png"></p><p>此时查看远端仓库，已有本地仓库的内容：</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071630712.png"></p><p>提交历史：</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071630737.png"></p><ul><li>查看本地分支与远程分支的绑定关系</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071630422.png"></p><p>此时尚未有绑定关系</p><ul><li>将本地分支 master 和远程分支 master 绑定关系</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin master:master</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071630251.png"></p><p>发现本地分支 master 已经和远程分支 master 绑定成功</p><ol><li>此时本地分支 master 若要推送到远程分支 master 上，则可直接使用命令：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="4-3-2-克隆-抓取和拉取"><a href="#4-3-2-克隆-抓取和拉取" class="headerlink" title="4.3.2 克隆_抓取和拉取"></a>4.3.2 克隆_抓取和拉取</h4><ol><li>克隆刚才的远程仓库 git_test，放在目录 git_test 中</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@gitee.com:zeng-yiming/git_test.git git_test</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071630075.png"></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071630839.png"></p><ul><li>查看克隆仓库的日志</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071630887.png"></p><ul><li>在本地仓库 test 中新建一个文件 file04.txt 并提交和推送</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071630358.png"></p><p>发现由于<strong>快进模式</strong>，远端分支 master 也进入到了和本地仓库 test 的 master 分支相同的位置。</p><ul><li>本地仓库 git_test 从远端仓库抓取</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071630903.png"></p><ul><li>发现远端分支 master 比本地分支 master 的版本更新，因此进行合并</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071631463.png"></p><p>步骤 4 和 5 的指令可用一条指令完成：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h4 id="4-3-3-解决冲突"><a href="#4-3-3-解决冲突" class="headerlink" title="4.3.3 解决冲突"></a>4.3.3 解决冲突</h4><ol><li>在本地仓库<code>test</code>和<code>git_test</code>中同时修改文件<code>file01.txt</code>，并提交，但是<code>test</code>首先推送至远端</li><li>在<code>test</code>推送后，<code>git_test</code>首先进行抓取</li></ol><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071631698.png"></p><p>发现远端分支已经有 test 的推送结果</p><ul><li>git_test 进行合并，提示冲突</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071631001.png"></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071631165.png"></p><ul><li>解决冲突：将 file01.txt 的内容改成我们想要的，例如就改成 5，之后提交并推送即可</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071631931.png"></p><h2 id="5-IDEA-中的-Git-使用"><a href="#5-IDEA-中的-Git-使用" class="headerlink" title="5 IDEA 中的 Git 使用"></a>5 IDEA 中的 Git 使用</h2><h3 id="5-1-配置-Git"><a href="#5-1-配置-Git" class="headerlink" title="5.1 配置 Git"></a>5.1 配置 Git</h3><p>略</p><h3 id="5-2-在-IDEA-中操作-Git"><a href="#5-2-在-IDEA-中操作-Git" class="headerlink" title="5.2 在 IDEA 中操作 Git"></a>5.2 在 IDEA 中操作 Git</h3><p>场景：本地已经有一个项目，但是并不是 git 项目，我们需要将这个放到码云的仓库里，和其他开发人员继续一起协作开发。</p><h4 id="5-2-1-创建项目的远程仓库"><a href="#5-2-1-创建项目的远程仓库" class="headerlink" title="5.2.1 创建项目的远程仓库"></a>5.2.1 创建项目的远程仓库</h4><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071631149.png"></p><h4 id="5-2-2-初始化本地仓库"><a href="#5-2-2-初始化本地仓库" class="headerlink" title="5.2.2 初始化本地仓库"></a>5.2.2 初始化本地仓库</h4><p><strong>初始化本地仓库</strong></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071631517.png"></p><p><strong>选择本项目</strong></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071632597.png"></p><h4 id="5-2-3-设置远程仓库"><a href="#5-2-3-设置远程仓库" class="headerlink" title="5.2.3 设置远程仓库"></a>5.2.3 设置远程仓库</h4><p><strong>查找选项</strong></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071632226.png"></p><p><strong>输入远程仓库地址</strong></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071632175.png"></p><h4 id="5-2-4-提交到本地仓库"><a href="#5-2-4-提交到本地仓库" class="headerlink" title="5.2.4 提交到本地仓库"></a>5.2.4 提交到本地仓库</h4><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071632082.png"></p><h4 id="5-2-5-推送到远程仓库"><a href="#5-2-5-推送到远程仓库" class="headerlink" title="5.2.5 推送到远程仓库"></a>5.2.5 推送到远程仓库</h4><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071632848.png"></p><h4 id="5-2-6-创建分支"><a href="#5-2-6-创建分支" class="headerlink" title="5.2.6 创建分支"></a>5.2.6 创建分支</h4><ul><li>方法一：最常规的方式</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071632182.png"></p><ul><li>方法 2：最强大的方式</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071633741.png"></p><h4 id="5-2-总结"><a href="#5-2-总结" class="headerlink" title="5.2 总结"></a>5.2 总结</h4><ul><li>在 IDEA 的终端中可使用 git 命令来完成以上所有功能</li><li>切换分支前先提交本地的修改</li><li>代码及时提交，提交过了就不会丢</li></ul><h2 id="6-Git-知识补充"><a href="#6-Git-知识补充" class="headerlink" title="6 Git 知识补充"></a>6 Git 知识补充</h2><h3 id="6-1-rebase-和-merge"><a href="#6-1-rebase-和-merge" class="headerlink" title="6.1 rebase 和 merge"></a>6.1 rebase 和 merge</h3><h4 id="6-1-1-HEAD-的理解"><a href="#6-1-1-HEAD-的理解" class="headerlink" title="6.1.1 HEAD 的理解"></a>6.1.1 HEAD 的理解</h4><p><code>HEAD</code> 指向当前所在的分支，类似一个活动的指针，表示一个「引用」。</p><p><code>HEAD</code> 既可以指向「当前分支」的最新 <code>commit</code>，也可以指向历史中的某一次 <code>commit</code> (「分离头指针」的情况)。归根结底，<code>HEAD</code> 指向的就是某个提交点。</p><p>当我们做分支切换时，<code>HEAD</code> 会跟着切换到对应分支。</p><h4 id="6-1-2-fast-forward-与-—no-ff-的区别"><a href="#6-1-2-fast-forward-与-—no-ff-的区别" class="headerlink" title="6.1.2 fast-forward 与 —no-ff 的区别"></a>6.1.2 fast-forward 与 —no-ff 的区别</h4><p>假如有一个场景：有两个分支，master 分支和 feature 分支。现在，feautre 分支需要合并回 master 分支。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071633947.png"></p><ul><li>fast-forward 合并方式是条件允许的情况，通过将 master 分支的 HEAD 位置移动到 feature 分支的最新提交点上，这样就实现了快速合并。这种情况，是不会新生成 commit 的。（快进模式）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master <span class="comment"># 先切换到master分支</span></span><br><span class="line">git merge feature <span class="comment"># 将feature分支合并到当前分支上（master）</span></span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071633109.png"></p><ul><li>–no-ff 的方式进行合并，master 分支就会新生成一次提交记录。</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071633906.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master <span class="comment"># 先切换到master分支</span></span><br><span class="line">git merge --no-ff feature <span class="comment"># 将feature分支合并到当前分支上（master）</span></span><br></pre></td></tr></table></figure><p>如果条件满足时，merge 默认采用的 fast-forward 方式进行合并，除非你显示的加上 –no-ff 选项；而条件不满足时，merge 也是无法使用 fast-forward 合并成功的！</p><h4 id="6-1-3-merge-操作"><a href="#6-1-3-merge-操作" class="headerlink" title="6.1.3 merge 操作"></a>6.1.3 merge 操作</h4><p><code>git merge</code> 操作是区分上下文的。当前分支始终是目标分支，其他一个或多个分支始终合并到当前分支。这个注意点记住了，方便记忆！所以，当需要将某个分支合并到目标分支时，需要先切到目标分支上。</p><p><strong>条件满足的含义</strong></p><p>快进模式能够进行的条件是：<strong>源分支和目标分支之间没有分叉</strong>。下图则是无法通过 HEAD 的快速移动实现分支的合并。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071633967.png"></p><p>如果执行合并操作，默认会尝试 fast-forward 的方式进行合并，但是因为分叉了，所以此时会采用 no-ff 的方式进行合并，有新的 commit 生成了。最终的结果图如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master <span class="comment"># 先切换到目标分支</span></span><br><span class="line">git merge feature</span><br></pre></td></tr></table></figure><h4 id="6-1-4-rebase-操作"><a href="#6-1-4-rebase-操作" class="headerlink" title="6.1.4 rebase 操作"></a>6.1.4 rebase 操作</h4><p>rebase 合并往往又被称为 「变基」。这里的「基」就是一个「基点」、「起点」的意思。git rebase 命令通常称为向前移植（forward porting）。</p><p>「变基」就是改变当前分支的起点。注意，是当前分支！ rebase 命令后面紧接着的就是「基分支」。与 merge 操作相反。</p><ul><li>变基前：</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071634250.png"></p><ul><li>执行命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- git checkout feature <span class="comment"># 切换到当前分支，或待变基分支</span></span><br><span class="line">- git rebase master <span class="comment"># 变基</span></span><br><span class="line"><span class="comment">#可合并为下面的语句</span></span><br><span class="line">git rebase master feature</span><br></pre></td></tr></table></figure><ul><li>变基后：</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071634708.png"></p><ul><li>解释：rebase，变基，可以直接理解为改变基底。feature 分支是基于 master 分支的 B 拉出来的分支，feature 的基底是 B。而 master 在 B 之后有新的提交，就相当于此时要用 master 上新的提交来作为 feature 分支的新基底。实际操作为把 B 之后 feature 的提交存下来，然后删掉原来这些提交，再找到 master 的最新提交位置，把存下来的提交再接上去（新节点新 commit id），如此 feature 分支的基底就相当于变成了 E 而不是原来的 B 了。（注意，如果 master 上在 B 以后没有新提交，那么就还是用原来的 B 作为基，rebase 操作相当于无效，此时和 git merge 就基本没区别了，差异只在于 git merge 会多一条记录 Merge 操作的提交记录）</li></ul><p><strong>推荐使用场景</strong></p><ul><li><p>往公共分支上合代码的时候，推荐使用 merge。</p></li><li><p>拉公共分支最新代码的时候，推荐使用 rebase，也就是 git pull -r 或 git pull –rebase，但有个缺点就是 rebase 以后我就不知道我的当前分支最早是从哪个分支拉出来的了，因为基底变了嘛。</p></li></ul><p><strong>图示</strong></p><p>从 Develop 分支分出两个分支，分属两个人员进行开发。F1 分支开发完毕后，push 到总分支。F2 分支开发到 F2_5 时需要拉取最新代码。</p><ul><li>如果 F2 分支采用 git pull 拉取最新代码：<ul><li>F1 分支的视角（F1 分支的 commit 记录）：</li></ul></li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071634534.png"></p><ul><li>F2 分支的视角：这将会把 F1 分支的修改直接拉下来于本地代码 merge，且产生一个 commit F2_5，也就是 merge commit。</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071634648.png"></p><ul><li>如果 F2 分支采用 git pull –rebase 拉取最新代码：<ul><li>F1 分支视角不变</li><li>F2 分支视角：</li></ul></li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071634387.png"></p><h3 id="6-2-强制拉取到本地仓库"><a href="#6-2-强制拉取到本地仓库" class="headerlink" title="6.2 强制拉取到本地仓库"></a>6.2 强制拉取到本地仓库</h3><p>有些时候本地仓库提交管理混乱，需要从远程仓库强制拉取，以刷新本地仓库，覆盖所有 add 和 commit 操作。可执行以下代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="6-3-远程分支合并"><a href="#6-3-远程分支合并" class="headerlink" title="6.3 远程分支合并"></a>6.3 远程分支合并</h3><p>该项职责由 git 管理员来完成。例如当开发分支 Develop 上的所有功能已经完成时，需要合并到 master 上时：</p><ul><li>代码 clone 到本地仓库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span></span><br></pre></td></tr></table></figure><ul><li>在本地创建 dev 分支并与远程 dev 分支对应</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure><ul><li>切换到 master 分支</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><ul><li>本地的 dev 合并到 master 上（遇到冲突解决完后再次提交）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><ul><li>推送到远程的 master 上（执行这项操作时，需要有操作远程 master 分支的权限）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071634857.png"></p><ul><li>释放权限：</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071634866.png"></p><ul><li>操作结果：</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071635354.png"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强缓存与协商缓存</title>
      <link href="/2021/08/13/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%BC%BA%E7%BC%93%E5%AD%98%E4%B8%8E%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/"/>
      <url>/2021/08/13/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%BC%BA%E7%BC%93%E5%AD%98%E4%B8%8E%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="强缓存与协商缓存"><a href="#强缓存与协商缓存" class="headerlink" title="强缓存与协商缓存"></a>强缓存与协商缓存</h1><p>学习来源：</p><p>1.<a href="https://blog.csdn.net/weixin_57780816/article/details/120416382">强缓存和协商缓存_小南xn的博客-CSDN博客_协商缓存和强制缓存</a></p><p>2.<a href="https://juejin.cn/post/6844903736196726798">浅解强缓存和协商缓存 - 掘金 (juejin.cn)</a></p><p>3.<a href="https://javajgs.com/archives/3488">https://javajgs.com/archives/3488</a></p><p>4.<a href="http://www.zyiz.net/tech/detail-134425.html">http://www.zyiz.net/tech/detail-134425.html</a></p><h2 id="1-Web的缓存"><a href="#1-Web的缓存" class="headerlink" title="1.Web的缓存"></a>1.Web的缓存</h2><p>Web 缓存可以<strong>自动保存常见文档副本</strong>。当 Web 请求抵达缓存时， 如果<code>本地</code>有“已缓存的”副本，就可以从本地存储设备而不是原始服务器中提取这个文档。</p><h3 id="缓存的优缺点："><a href="#缓存的优缺点：" class="headerlink" title="缓存的优缺点："></a>缓存的优缺点：</h3><p>优点：</p><ul><li>减少冗余的数据传输。</li><li>缓解了网络瓶颈的问题，不需要更多的带宽就能够更快地加载页面。</li><li>降低了对原始服务器的要求。服务器可以更快地响应，避免过载的出现。</li><li>降低了距离时延，因为从较远的地方加载页面会更慢一些。</li></ul><p>缺点：</p><ul><li>缓存中的数据<strong>可能与服务器的数据不一致</strong>；</li><li>消耗内存；</li></ul><h2 id="2-缓存的流程"><a href="#2-缓存的流程" class="headerlink" title="2.缓存的流程"></a>2.缓存的流程</h2><p>浏览器里有一个专门存放<strong>缓存规则的一个数据库</strong>，也可以说是一个<code>映射表</code>，把缓存资源信息，同电脑磁盘中的实际文件的地址，对应起来。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181656007.png"></p><p><strong>当浏览器第一次请求资源时：</strong></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181658957.png" alt="image-20220618165856860"></p><p>上面所说的<code>缓存规则</code>，就是声明所请求的这个资源，要采取哪种缓存策略？缓存多长时间？等等。。。而这个规则，是在http的header中的返回来的</p><p>注意： 是<code>response header</code> ，而不是 <code>request header</code> ！！！</p><p>而实际上， request header 中也会携带规则信息，下面会讲，要区分 request 和 response</p><h2 id="3-强缓存和协商缓存"><a href="#3-强缓存和协商缓存" class="headerlink" title="3.强缓存和协商缓存"></a>3.强缓存和协商缓存</h2><h3 id="1-强缓存"><a href="#1-强缓存" class="headerlink" title="1.强缓存"></a>1.强缓存</h3><p><strong>简单粗暴，如果资源没过期，就取缓存，如果过期了，则请求服务器</strong>。</p><p><strong>即</strong>：浏览器进行资源请求时，会判断response headers是否命中强缓存，如果命中，直接从本地读取缓存，不会向服务器发送请求，</p><p>在http1.1协议中，主要是看 response headers 中的 <code>Cache-Contro</code>l 的值（是一个<code>相对时间</code>），图中的<code>max-age = 31xxxxxxx</code>，就是说在这些秒内，都直接使用缓存，超过了就继续请求服务器</p><p>&#x2F;&#x2F;还有一个 Expires （http1.0中的），已经基本淘汰了，所以不用管</p><p><strong>Cache-Control 的几个取值含义：</strong></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181706670.png"></p><p><strong>所以</strong>，对于强缓存，我们主要研究 <code>Cache-Control</code> 中的 <code>max-age</code> 和 <code>no-cache</code></p><p><strong>所以</strong>，判断该资源是否命中强缓存，就看 <code>response header</code>中 <code>Cache-Control</code> 的值，如果有<code>max-age=xxx</code>秒，则<font color='cornflowerblue'>命中强缓存</font>。如果<code>Cache-Control</code>的值是<code>no-cache</code>，说明没命中强缓存，<font color='cornflowerblue'>走协商缓存</font>。</p><h4 id="强缓存流程："><a href="#强缓存流程：" class="headerlink" title="强缓存流程："></a><strong>强缓存流程：</strong></h4><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181709274.png"></p><hr><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181709073.png"></p><p><strong>所以</strong>，强缓存步骤如下：</p><ol><li>第一次请求 a.js ，缓存表中没该信息，直接请求后端服务器。</li><li>后端服务器返回了 a.js ，且 <code>response header</code> 中 <code>cache-control</code> 为<br><code>max-age=xxxx</code>，所以是强缓存规则，存入缓存表中。</li><li>第二次请求 a.js ，缓存表中是 max-age，<br>那么命中强缓存，然后判断是否过期，如果没过期，直接读缓存的a.js，如果过期了，则执行协商缓存的步骤了。</li></ol><p><strong>注意：</strong></p><p>这里有个问题，就是 <code>max-age = 0</code> 和 <code>no-cache</code> 有啥区别？</p><p><code>no-cache</code>是直接不进行强缓存，让你去走协商缓存，而max-age&#x3D;0是进行强缓存，但是过期了，需要更新。。。虽然实际上看起来两者效果是一样的。<br>（参考链接<a href="https://www.itranslater.com/qa/details/2106051831532094464%EF%BC%89">https://www.itranslater.com/qa/details/2106051831532094464）</a></p><h3 id="2-协商缓存"><a href="#2-协商缓存" class="headerlink" title="2.协商缓存"></a>2.协商缓存</h3><h4 id="触发条件："><a href="#触发条件：" class="headerlink" title="触发条件："></a>触发条件：</h4><ol><li>Cache-Control 的值为 no-cache （不强缓存）</li><li>或者 max-age 过期了 （强缓存，但总有过期的时候）</li></ol><p>也就是说，不管怎样，都可能最后要进行协商缓存（no-store除外）</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181720044.png"></p><p>上图中，虽然强缓存命中了，但是也有 <code>ETag</code> 和 <code>Last-Modified</code> ，这两个是<strong>协商缓存</strong>的相关规则（它俩不影响之前的强缓存流程）</p><p><code>ETag</code>：每个文件有一个，改动文件了就变了，可以看似md5</p><p><code>Last-Modified</code>：文件的修改时间</p><p>也就是说，每次http返回来 <code>response header</code> 中的 <code>ETag</code>和 <code>Last-Modified</code>，在下次请求时在 <code>request header</code> 就把这两个带上（但是名字变了<code>ETag–&gt;If-None-Match</code>，<code>Last-Modified–&gt;If-Modified-Since</code> ），服务端把<strong>你带过来的标识和资源目前的标识进行对比</strong>，然后判断资源是否更改了。</p><p>这个过程是循环往复的，即：<strong>缓存表在每次请求成功后都会更新规则</strong>。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181724900.png"></p><h4 id="协商缓存的流程："><a href="#协商缓存的流程：" class="headerlink" title="协商缓存的流程："></a>协商缓存的流程：</h4><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181725085.png"></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181725311.png"></p><p><strong>所以</strong>，协商缓存步骤如下：</p><ol><li>请求资源时，把用户本地该资源的 ETag 和last-Modified（这俩名称会变）同时带到服务端，服务端和最新资源做对比。</li><li>如果资源没更改，返回304，浏览器读取本地缓存。</li><li>如果资源有更改，返回200、对应ETag 和last-Modified，并返回最新的资源。</li></ol><h2 id="4-如何查看是否命中缓存？"><a href="#4-如何查看是否命中缓存？" class="headerlink" title="4.如何查看是否命中缓存？"></a>4.如何查看是否命中缓存？</h2><p>1.从服务器获取新的资源（不是缓存）<br><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181729026.png"></p><p>2.命中强缓存，且资源没过期，直接读取本地缓存</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181729512.png"></p><p>3.强缓存时间过了，命中协商缓存，且资源未更改，读取本地缓存。<br>注意：协商缓存无论如果，都要向服务端发请求的，只不过，资源未更改时，返回的只是header信息，所以size很小；而资源有更改时，还要返回body数据，所以size会大。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181729657.png"></p><h2 id="5-怎么配置资源的缓存规则？"><a href="#5-怎么配置资源的缓存规则？" class="headerlink" title="5.怎么配置资源的缓存规则？"></a>5.怎么配置资源的缓存规则？</h2><p>可以有后端服务器配置，也可以在nginx中配置，稍后会更新一张nginx的配置</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181731414.png"><br><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181731147.png"></p><p><strong>1.为什么要有Etag</strong></p><p>你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag呢？HTTP1.1中Etag的出现（也就是说，<font color='red'>ETag是新增的</font>，为了解决之前只有If-Modified的缺点）主要是为了解决几个Last-Modified比较难解决的问题：</p><ul><li>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；</li><li>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；</li><li>某些服务器不能精确的得到文件的最后修改时间。</li></ul><p><strong>2.强缓存与协商缓存的区别可以用下表来表示：</strong><br><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181730949.png" alt="在这里插入图片描述"><br><strong>3.用户行为对缓存的影响</strong></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181730941.png" alt="在这里插入图片描述"><br><strong>即</strong>：F5会跳过强缓存规则，直接走协商缓存；Ctrl+F5 ，跳过所有缓存规则，和第一次请求一样，重新获取资源</p><p><strong>日常开发的项目缓存策略：</strong></p><ol><li>日常开发环境中，比如 vue 项目，脚手架已经将更改的文件做 hash 处理了，因此每次都是最新的，不会被缓存，因此一般的 js、css 文件不需要我们再去操作。</li><li>而对于 index.html，我们需要在 nginx 上做 no-store 处理，即完全不缓存 index.html，每次都请求最新的html。。。因为 html 中会外链 css、js，如果我 html 还是走的缓存，那链接的还是老的 css</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181730952.png" alt="在这里插入图片描述"><br><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202206181730966.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强缓存与协商缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>块、行内、行内块元素的区别</title>
      <link href="/2021/07/03/%E5%89%8D%E7%AB%AF/css/%E5%9D%97%E3%80%81%E8%A1%8C%E5%86%85%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0/"/>
      <url>/2021/07/03/%E5%89%8D%E7%AB%AF/css/%E5%9D%97%E3%80%81%E8%A1%8C%E5%86%85%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>学习来源：稀土掘金-<a href="https://juejin.cn/post/6998925491797229599">明天也要努力</a></p><p><code>元素</code>是<code>文档结构</code>的基础，不同的元素显示方式是不同的，有占据一整行的，有水平一个挨着一个的。 比如：div 与 span 的显示方式不一样，因为 div 是块级元素，会占据一行，而 span 为行内元素，可多个 span 放置一行。</p><p>接下来就详细讲一下在 CSS 中<strong>块级元素</strong>、<strong>行内元素</strong>和<strong>行内块级元素</strong>的区别。</p><h2 id="1-块级元素-block"><a href="#1-块级元素-block" class="headerlink" title="1. 块级元素 block"></a>1. 块级元素 block</h2><p><code>块级元素</code>，该元素呈现“块”状，所以它有自己的宽度和高度，也就是可自定义 width 和 height。除此之外，块级元素比较霸道，它独自占据一行高度（float 浮动除外），一般可以作为其他容器使用，可容纳块级元素和行内元素。</p><p>块级元素有以下特点：</p><ul><li>每个块级元素都是独自占一行；</li><li>高度，行高，外边距（margin）以及内边距（padding）都可以控制；</li><li>元素的宽度如果不设置的话，<code>默认为父元素的宽度</code>（父元素宽度 100%)；</li><li>多个块状元素标签写在一起，默认排列方式为从上至下；</li><li>常用：div、p、h1~h6、ul、ol、li、hr</li><li>详细的如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;address&gt;  <span class="comment">// 定义地址</span></span><br><span class="line">&lt;caption&gt;  <span class="comment">// 定义表格标题</span></span><br><span class="line">&lt;dd&gt;      <span class="comment">// 定义列表中定义条目</span></span><br><span class="line">&lt;div&gt;     <span class="comment">// 定义文档中的分区或节</span></span><br><span class="line">&lt;dl&gt;    <span class="comment">// 定义列表</span></span><br><span class="line">&lt;dt&gt;     <span class="comment">// 定义列表中的项目</span></span><br><span class="line">&lt;fieldset&gt;  <span class="comment">// 定义一个框架集</span></span><br><span class="line">&lt;form&gt;  <span class="comment">// 创建 HTML 表单</span></span><br><span class="line">&lt;h1&gt;    <span class="comment">// 定义最大的标题</span></span><br><span class="line">&lt;h2&gt;    <span class="comment">// 定义副标题</span></span><br><span class="line">&lt;h3&gt;     <span class="comment">// 定义标题</span></span><br><span class="line">&lt;h4&gt;     <span class="comment">// 定义标题</span></span><br><span class="line">&lt;h5&gt;     <span class="comment">// 定义标题</span></span><br><span class="line">&lt;h6&gt;     <span class="comment">// 定义最小的标题</span></span><br><span class="line">&lt;hr&gt;     <span class="comment">// 创建一条水平线</span></span><br><span class="line">&lt;legend&gt;    <span class="comment">// 元素为 fieldset 元素定义标题</span></span><br><span class="line">&lt;li&gt;     <span class="comment">// 标签定义列表项目</span></span><br><span class="line">&lt;noframes&gt;    <span class="comment">// 为那些不支持框架的浏览器显示文本，于 frameset 元素内部</span></span><br><span class="line">&lt;noscript&gt;    <span class="comment">// 定义在脚本未被执行时的替代内容</span></span><br><span class="line">&lt;ol&gt;     <span class="comment">// 定义有序列表</span></span><br><span class="line">&lt;ul&gt;    <span class="comment">// 定义无序列表</span></span><br><span class="line">&lt;p&gt;     <span class="comment">// 标签定义段落</span></span><br><span class="line">&lt;pre&gt;     <span class="comment">// 定义预格式化的文本</span></span><br><span class="line">&lt;table&gt;     <span class="comment">// 标签定义 HTML 表格</span></span><br><span class="line">&lt;tbody&gt;     <span class="comment">// 标签表格主体（正文）</span></span><br><span class="line">&lt;td&gt;    <span class="comment">// 表格中的标准单元格</span></span><br><span class="line">&lt;tfoot&gt;     <span class="comment">// 定义表格的页脚（脚注或表注）</span></span><br><span class="line">&lt;th&gt;    <span class="comment">// 定义表头单元格</span></span><br><span class="line">&lt;thead&gt;    <span class="comment">// 标签定义表格的表头</span></span><br><span class="line">&lt;tr&gt;     <span class="comment">// 定义表格中的行</span></span><br></pre></td></tr></table></figure><h2 id="2-行内-内联-元素-inline"><a href="#2-行内-内联-元素-inline" class="headerlink" title="2. 行内(内联)元素 inline"></a>2. 行内(内联)元素 inline</h2><p>行内元素不可以设置宽（width）和高（height），但可以与其他行内元素位于同一行，行内元素内一般不可以包含块级元素。<code>行内元素的高度一般由元素内部的字体大小决定，宽度由内容的长度控制</code>。 行内元素有以下特点：</p><ul><li>不会独占一行，相邻的行内元素会排列在同一行里，直到一行排不下才会自动换行，其宽度随元素的内容而变化；</li><li>高宽无效，对外边距（margin）和内边距（padding）仅设置<code>左右方向有效 ，上下无效</code>；</li><li>设置行高有效，等同于给父级元素设置行高；</li><li>元素的宽度就是它包含的文字或图片的宽度，不可改变；</li><li>行内元素中不能放块级元素，a 链接里面不能再放链接；</li><li>常用：span、a、strong、em、del、ins</li><li>详细的如下：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>     // 标签可定义锚</span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span>&gt;</span>     // 表示一个缩写形式</span><br><span class="line"><span class="tag">&lt;<span class="name">acronym</span>&gt;</span>     // 定义只取首字母缩写</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>     // 字体加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">bdo</span>&gt;</span>     // 可覆盖默认的文本方向</span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>     // 大号字体加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>     // 换行</span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span>     // 引用进行定义</span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>    // 定义计算机代码文本</span><br><span class="line"><span class="tag">&lt;<span class="name">dfn</span>&gt;</span>     // 定义一个定义项目</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>     // 定义为强调的内容</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>     // 斜体文本效果</span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>     // 定义键盘文本</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>     // 标签为 input 元素定义标注（标记）</span><br><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span>     // 定义短的引用</span><br><span class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>     // 定义样本文本</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span> // 创建单选或多选菜单</span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>     // 呈现小号字体效果</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>     // 组合文档中的行内元素</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span> // 加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>     // 定义下标文本</span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>     // 定义上标文本</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span>     // 多行的文本输入控件</span><br><span class="line"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>     // 打字机或者等宽的文本效果</span><br><span class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span>    // 定义变量</span><br></pre></td></tr></table></figure><h2 id="3-行内块级元素-inline-block"><a href="#3-行内块级元素-inline-block" class="headerlink" title="3. 行内块级元素 inline-block"></a>3. 行内块级元素 inline-block</h2><p>行内块级元素，它既具有块级元素的特点，也有行内元素的特点，它可以自由设置元素宽度和高度，也可以在一行中放置多个行内块级元素。比如：input、img 就是行内块级元素，它可设置高宽以及一行多个。 具体特点如下：</p><ul><li>高度、行高、外边距以及内边距都可以控制；</li><li>默认宽度就是它本身内容的宽度，不独占一行，但是<code>元素之间会有空白缝隙</code>，设置父级的 font-size 为 0，再设置子元素字体大小，才会消除间隙；</li><li>常用：img、input、td</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-元素类型转换-display"><a href="#4-元素类型转换-display" class="headerlink" title="4. 元素类型转换 display"></a>4. 元素类型转换 display</h2><p>display：block ，定义元素为块级元素</p><p>display : inline ，定义元素为行内元素</p><p>display：inline-block，定义元素为行内块级元素</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>不管块级元素还是行内元素，区别:一是排列方式，二是宽高边距设置，三是默认宽度。</p><ul><li>块级元素会独占一行，而内联元素和内联块元素则会在一行内显示；</li><li>块级元素和内联块元素可设置 width、height 属性，而内联元素设置无效；</li><li>块级元素的 width 默认为 100%，而内联元素则是根据其自身的内容或子元素来决定其宽度；</li></ul><p>而行内块级元素又同时拥有块级元素和行内元素的特点。</p><p><strong>注意：</strong></p><ul><li>行内元素的<code>margin</code>和<code>padding</code>对左右设置有效，上下设置无效；</li><li>行内元素高度由内部字体的行高决定，宽度由内容长度决定；</li><li>行内、行内块元素间有空隙，需要设置父级元素的 font-size&#x3D;0，再设置子元素的字体，才会消除间隙；</li><li>行内、行内块元素使用 text-align：设置对齐方式</li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 块、行内、行内块元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS盒模型与margin负值</title>
      <link href="/2021/07/01/%E5%89%8D%E7%AB%AF/css/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E4%B8%8Emargin%E8%B4%9F%E5%80%BC/"/>
      <url>/2021/07/01/%E5%89%8D%E7%AB%AF/css/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E4%B8%8Emargin%E8%B4%9F%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-盒模型与-margin-负值"><a href="#CSS-盒模型与-margin-负值" class="headerlink" title="CSS 盒模型与 margin 负值"></a>CSS 盒模型与 margin 负值</h1><p>学习来源：稀土掘金-<a href="https://juejin.cn/post/7025880293013716999">一尾流莺</a></p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p><code>盒子模型</code>，可以装东西的称为盒子，比如 <code>div</code>，<code>h</code>，<code>li</code> 等等。像 <code>img</code>，<code>input</code> 这种不能装东西的就不是盒子。</p><p>盒模型：</p><ul><li>分为内容（<code>content</code>）、填充（<code>padding</code>）、边界（<code>margin</code>）、边框（<code>border</code>）四个部分</li><li>内容又分为高(<code>height</code>)、宽(<code>width</code>)</li></ul><h2 id="2-盒子模型的类型"><a href="#2-盒子模型的类型" class="headerlink" title="2.盒子模型的类型"></a>2.盒子模型的类型</h2><h3 id="1-IE-盒模型—-怪异盒模型（border-box）"><a href="#1-IE-盒模型—-怪异盒模型（border-box）" class="headerlink" title="1.IE 盒模型—-怪异盒模型（border-box）"></a>1.IE 盒模型—-怪异盒模型（border-box）</h3><p><code>IE</code> 盒模型：属性 <code>width</code>，<code>height</code> 包含 <code>content</code>、<code>border</code> 和 <code>padding</code>，指的是 <code>content + padding + border</code></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205191254653.webp" alt="image.png"></p><h3 id="2-W3C-标准盒模型（content-box）"><a href="#2-W3C-标准盒模型（content-box）" class="headerlink" title="2.W3C 标准盒模型（content-box）"></a>2.W3C 标准盒模型（content-box）</h3><p><code>W3C</code> 标准盒模型：属性 <code>width</code> ，<code>height</code> 只包含内容 <code>content</code>，不包含 <code>border</code> 和 <code>padding</code> 。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205191254758.webp" alt="image.png"></p><h2 id="3-切换盒模型"><a href="#3-切换盒模型" class="headerlink" title="3.切换盒模型"></a>3.切换盒模型</h2><p>如果想要切换盒模型也很简单，这里需要修改 <code>css3</code> 的 <code>box-sizing</code> 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//W3C盒子模型</span></span><br><span class="line">box-<span class="attr">sizing</span>: content-box</span><br><span class="line"><span class="comment">//IE盒子模型</span></span><br><span class="line">box-<span class="attr">sizing</span>: border-box</span><br></pre></td></tr></table></figure><h2 id="4-margin-负值问题"><a href="#4-margin-负值问题" class="headerlink" title="4.margin 负值问题"></a>4.margin 负值问题</h2><ul><li><code>margin-top</code> 元素自身会向上移动，同时会影响下方的元素会向上移动；</li><li><code>margin-botom</code> 元素自身不会位移，<font color='red'>但是会减少自身供 css 读取的高度，从而影响下方的元素会向上移动</font>。</li><li><code>margin-left</code> 元素自身会向左移动，同时会影响其它元素；</li><li><code>margin-right</code> 元素自身不会位移，<font color='red'>但是会减少自身供 css 读取的宽度，从而影响右侧的元素会向左移动</font>；</li></ul><p>先初始化几个盒子，然后分别给它们设置一下不同的 <code>margin</code> 负值，看看和上面的结论一不一致。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.yellow</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205191254616.webp" alt="image.png"></p><h3 id="1-margin-top"><a href="#1-margin-top" class="headerlink" title="1.margin-top"></a>1.margin-top</h3><p>我们给绿色的盒子设置一个 <code>margin-top</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.green</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下，可以看到绿色的盒子<strong>自身</strong>向上移动了，下方的元素会随着它一起发生位移。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205191254603.webp" alt="image.png"></p><h3 id="2-margin-bottom"><a href="#2-margin-bottom" class="headerlink" title="2.margin-bottom"></a>2.margin-bottom</h3><p>我们给绿色的盒子设置一个 <code>margin-bottom</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.green</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下，可以看到绿色的盒子自身并没有发生位移，但是<strong>高度变短了</strong>，同时下方黄色的盒子向上发生了移动。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205191254651.webp" alt="image.png"></p><h3 id="3-margin-left"><a href="#3-margin-left" class="headerlink" title="3.margin-left"></a>3.margin-left</h3><p>首先我们给元素一个浮动，让其横向排列，然后我们给绿色的盒子设置一个 <code>margin-left</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下，可以看到绿色的盒子<strong>自身</strong>向左移动了，右侧黄色的盒子会随着它一起发生位移。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205191254655.webp" alt="image.png"></p><h3 id="4-margin-right"><a href="#4-margin-right" class="headerlink" title="4.margin-right"></a>4.margin-right</h3><p>我们给绿色的盒子设置一个 <code>margin-right</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.green</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下，可以看到绿色的盒子自身没有发生位移，但是<strong>宽度减少了</strong>，同时右侧黄色的盒子向左移动了。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205191254990.webp" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 盒模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grid布局详解</title>
      <link href="/2021/06/13/%E5%89%8D%E7%AB%AF/css/grid%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/06/13/%E5%89%8D%E7%AB%AF/css/grid%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>学习来源：稀土掘金-<a href="https://juejin.cn/post/7019077784400035847">IDuxFE</a></p><h1 id="1-grid-布局"><a href="#1-grid-布局" class="headerlink" title="1.grid 布局"></a>1.grid 布局</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p><code>Grid网格布局</code> (下面都简称为 Grid 布局)，是一个基于<font color='red'>栅格</font>的<font color='red'>二维布局系统</font>，旨在彻底改变基于网格用户界面的设计。CSS 一直以来并没有把布局做的足够好。刚开始，我们使用 <code>table</code> ，后来是 <code>float</code> ， <code>position</code> 和 <code> inline-block</code> ，这些本质上是一些 <code>hacks</code> 而且许多重要功能尚未解决（例如垂直居中）。虽然<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex"> flex 弹性布局</a>可以做到这些，但是 flex 布局实际上是一维布局，而 Grid 布局是二维的，它远比 flex 布局要强大，以下是 Grid 布局的浏览器兼容性，支持 <code>Chrome57+</code> 、 <code>Edge16+</code> 、 <code>Firefox52+</code> 、 <code>Safari10.1+</code> 等</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139897.webp" alt="img"></p><h2 id="2-容器和项目"><a href="#2-容器和项目" class="headerlink" title="2.容器和项目"></a>2.容器和项目</h2><p>采用网格布局的区域，称为”容器”（container）。容器内部采用网格定位的子元素，称为”项目”（item）。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139924.webp" alt="img"></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139908.webp" alt="img"></p><h2 id="3-行、列、单元格、-区域、网格线"><a href="#3-行、列、单元格、-区域、网格线" class="headerlink" title="3.行、列、单元格、 区域、网格线"></a>3.行、列、单元格、 区域、网格线</h2><p>容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。行和列的交叉区域，称为”单元格”（cell）。正常情况下， <code>n</code> 行和 <code>m</code> 列会产生 <code>n x m</code> 个单元格。比如，例如：3 行 3 列会产生 9 个单元格。一定数量的单元格可以组成”区域”（area）, 区域必须是正方形&#x2F;长方形的，不可以是其他形状。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139903.webp" alt="img"></p><p>划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。正常情况下， <code>n</code> 行有 <code>n + 1</code> 根水平网格线， <code>m</code> 列有 <code>m + 1</code> 根垂直网格线，比如三行就有四根水平网格线。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139910.webp" alt="img"></p><h2 id="4-容器属性"><a href="#4-容器属性" class="headerlink" title="4.容器属性"></a>4.容器属性</h2><h3 id="4-1-display-grid，-display-inline-grid"><a href="#4-1-display-grid，-display-inline-grid" class="headerlink" title="4.1 display: grid， display: inline-grid"></a>4.1 display: grid， display: inline-grid</h3><p><code>display: grid</code> 指定一个容器采用网格布局</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139905.webp" alt="img"></p><p>默认情况下，网格都是<code>块级元素</code>，使用 <code>display: inline-grid</code> 可以将网格设置为<code>行内元素</code></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139393.webp" alt="img"></p><h3 id="4-2-grid-template-columns，grid-template-rows"><a href="#4-2-grid-template-columns，grid-template-rows" class="headerlink" title="4.2 grid-template-columns，grid-template-rows"></a>4.2 grid-template-columns，grid-template-rows</h3><p><code>grid-template-columns</code> 属性定义每一列的列宽， <code>grid-template-rows</code> 属性定义每一行的行高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-template-columns</span>&lt;rows&gt;: length | percent | auto | fr;</span><br></pre></td></tr></table></figure><p>定义一个三行三列的网格，列宽和行高都是 <code>100px</code> ，使用了网格布局，基本无须单独控制子项的宽高了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mian</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139426.webp" alt="img"></p><p>除了使用<strong>绝对单位</strong>，也可以使用<code>百分比</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139424.webp" alt="img"></p><p>也可以使用 <code>auto</code> ，子项会自适应父容器剩余大小去<code>撑开</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">50px</span> auto;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> auto <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139442.webp" alt="img"></p><p>最后可以使用推荐的关键字 <code>fr</code> ，可以理解为<font color='red'>比例值</font>，将行与列都分成 3 份</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139460.webp" alt="img"></p><p>将第二行与第二列都划分成 2 份</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139667.webp" alt="img"></p><h3 id="4-3-grid-template-areas"><a href="#4-3-grid-template-areas" class="headerlink" title="4.3 grid-template-areas"></a>4.3 grid-template-areas</h3><p>网格布局允许指定”<code>区域</code>“（area），一个区域由单个或多个单元格组成。 <code>grid-template-areas</code> 属性用于定义区域</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&quot;a b c&quot;</span></span><br><span class="line">    <span class="string">&quot;d e f&quot;</span></span><br><span class="line">    <span class="string">&quot;g h i&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139686.webp" alt="img"></p><p>可以将多个单元格合并成一个区域，其中 <code>grid-area</code> 后面会介绍，这里先不作深究</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&quot;a a b&quot;</span></span><br><span class="line">    <span class="string">&quot;a a b&quot;</span></span><br><span class="line">    <span class="string">&quot;c c c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: a;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139697.webp" alt="img"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&quot;a a b&quot;</span></span><br><span class="line">    <span class="string">&quot;a a b&quot;</span></span><br><span class="line">    <span class="string">&quot;c c c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139715.webp" alt="img"></p><h3 id="4-4-grid-template"><a href="#4-4-grid-template" class="headerlink" title="4.4 grid-template"></a>4.4 grid-template</h3><p><code>grid-template</code> 属性是 <code>grid-template-columns</code> 、 <code>grid-template-rows</code> 和 <code>grid-template-areas</code> 这三个属性的合并简写形式。但是不建议合并在一起写，所以这里就不作案例展示，毕竟这些属性本身比较难记。可以看 MDN 上关于 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template">grid-template</a> 相关的介绍</p><h3 id="4-5-grid-row-gap，grid-column-gap"><a href="#4-5-grid-row-gap，grid-column-gap" class="headerlink" title="4.5 grid-row-gap，grid-column-gap"></a>4.5 grid-row-gap，grid-column-gap</h3><p><code>grid-row-gap</code> 属性设置行与行的间隔（行间距）， <code>grid-column-gap</code> 属性设置列与列的间隔（列间距）。需要注意的是，<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout">CSS Grid Layout</a> 起初是用 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-gap"> <code>grid-row-gap</code> </a> 属性来定义的，目前逐渐被 <code>row-gap</code> 替代。因为其他布局方式也可以使用 gap 属性，例如 <code>flex弹性布局</code> 。但是，为了兼容那些不支持 <code>row-gap</code> 属性的浏览器，你需要像上面的例子一样使用带有前缀的属性。详情看 MDN 关于<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/CSS/row-gap">row-gap</a>的介绍</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-row</span>&lt;column&gt;-<span class="attribute">gap</span>: length;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139832.webp" alt="img"></p><p>可以看到行与列之间多了 20px 的间距</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139868.webp" alt="img"></p><h3 id="4-6-grid-gap"><a href="#4-6-grid-gap" class="headerlink" title="4.6 grid-gap"></a>4.6 grid-gap</h3><p><code>grid-gap</code> 属性是 <code>grid-column-gap</code> 和 <code>grid-row-gap</code> 的合并简写形式，现在已经逐渐被 gap 替代</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-gap</span>: &lt;grid-row-gap&gt;&lt;grid-column-gap&gt;;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139167.webp" alt="img"></p><h3 id="4-7-justify-items，align-items"><a href="#4-7-justify-items，align-items" class="headerlink" title="4.7 justify-items，align-items"></a>4.7 justify-items，align-items</h3><p><code>justify-items</code> 属性设置单元格内容的水平位置， <code>align-items</code>属性设置单元格内容的垂直位置，默认值都是 <code>stretch</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">justify-items&lt;<span class="attribute">align-items</span>&gt;: start | end | center | stretch;</span><br></pre></td></tr></table></figure><p>首先我们先定义一个 3 行 3 列的网格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139995.webp" alt="img"></p><p>为什么在没有给定子项宽高的情况下，仍然可以铺满整个父容器？原因是因为水平与垂直都是默认拉升的（ <code>stretch</code> ），也就是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  justify-items: stretch;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们给子项设置宽高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139023.webp" alt="img"></p><p>虽然子项的宽高发生了变化，但是实际上网格的大小仍然没有变，用调试工具就可以看出来：</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139197.webp" alt="img"></p><p>这个情况下，可以使用 <code>justify-items</code> ， <code>align-items</code> 来对齐子项的位置</p><p>行与列设置居中对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    justify-items: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139222.webp" alt="img"></p><p>行与列设置尾部对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    justify-items: end;</span><br><span class="line">    <span class="attribute">align-items</span>: end;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139328.webp" alt="img"></p><h3 id="4-8-place-items"><a href="#4-8-place-items" class="headerlink" title="4.8 place-items"></a>4.8 place-items</h3><p><code>place-items</code> 属性是 <code>align-items</code> 属性和 <code>justify-items</code> 属性的合并简写形式，注意的是，垂直对齐是在前，水平对齐是在后。如果只写一个，则默认垂直与水平是一致。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-items: &lt;align-items&gt;&lt;justify-items&gt;;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  place-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139329.webp" alt="img"></p><h3 id="4-9-justify-content-，-align-content"><a href="#4-9-justify-content-，-align-content" class="headerlink" title="4.9 justify-content ， align-content"></a>4.9 justify-content ， align-content</h3><p><code>justify-content</code> 属性是整个内容区域在容器里面的水平位置， <code>align-content</code> 属性是整个内容区域的垂直位置。默认都是 <code>start</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>&lt;<span class="attribute">align-content</span>&gt;: start | end | center | stretch | space-around |</span><br><span class="line">  space-between | space-evenly;</span><br></pre></td></tr></table></figure><p>首先定义一个 3 行 3 列的网格布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139364.webp" alt="img"></p><p>向结束位置对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: end;</span><br><span class="line">  <span class="attribute">align-content</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139409.webp" alt="img"></p><p>居中对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139546.webp" alt="img"></p><p>两端对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139491.webp" alt="img"></p><p>子项与子项之间间隔相等</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">align-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139569.webp" alt="img"></p><p>子项与子项之间间隔相等，子项与容器边框之间间隔相等</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">    <span class="attribute">align-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139572.webp" alt="img"></p><p>其他情况不在此继续展示，可自行尝试</p><h3 id="4-10-place-content"><a href="#4-10-place-content" class="headerlink" title="4.10 place-content"></a>4.10 place-content</h3><p><code>place-content</code> 属性是 <code>align-content</code> 属性和 <code>justify-content</code> 属性的合并简写形式。和 <code>place-items</code> 一样，垂直在前，水平在后。如果只写一个，则默认垂直与水平是一致。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-<span class="attribute">content</span>: &lt;align-content&gt;&lt;justify-content&gt;;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  place-<span class="attribute">content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139601.webp" alt="img"></p><h3 id="4-11-justify-items，align-items-与-justify-content，align-content-的注意点"><a href="#4-11-justify-items，align-items-与-justify-content，align-content-的注意点" class="headerlink" title="4.11 justify-items，align-items 与 justify-content，align-content 的注意点"></a>4.11 justify-items，align-items 与 justify-content，align-content 的注意点</h3><p>这两对属性和 <code>flex弹性布局</code> 很相似，所以经常搞混，这里特别要说明的是，与 <code>flex布局</code> 不一样的地方是，这两对属性都是作用在父容器上，而 <code>flex布局</code> 的 <code>justify-content</code> ， <code>align-items</code> 属性是作用在父容器上的，但是没有 <code>justify-items</code> ， <code>align-content</code> 这两个属性。一般在 <code>Grid布局</code> 中， <code>justify-items</code> ， <code>align-items</code> 是一起使用， <code>justify-content</code> ， <code>align-content</code> 是一起使用</p><p>那么什么时候使用 <code>justify-items</code> ， <code>align-items</code> ，什么时候使用 <code>justify-content</code> ， <code>align-content</code> 呢？</p><p>可以记住一个技巧：</p><p>（1）当子项的大小低于单元格的大小的时候，使用 <code>justify-items</code> ， <code>align-items</code></p><p>还记得前面说的吗，子项的大小是可能会比单元格小的，例如单元格大小是 <code>100*100</code> ，而子项大小只有 <code>50*50</code> 。这种情况使用 <code>justify-items</code> ， <code>align-items</code> 。</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139656.webp" alt="img"></p><p>（2）当容器大小大于单元格大小时，使用 <code>justify-content</code> ， <code>align-content</code></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139751.webp" alt="img"></p><h3 id="4-12-显示网格与隐式网格"><a href="#4-12-显示网格与隐式网格" class="headerlink" title="4.12 显示网格与隐式网格"></a>4.12 显示网格与隐式网格</h3><p>正常情况下，我们定义了 例如三行三列的网格，总共有 <code>9</code> 个元素，那这 <code>9</code> 个元素正好布满整个容器，这 <code>9</code> 个子项都是 <code>显示网格</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139788.webp" alt="img"></p><p>如果有超过 <code>9</code> 个子项呢？比如，数字 <code>10</code> ，数字 <code>11</code> ，数字 <code>12</code> …..？？这些多出来的网格就是 <code>隐式网格</code> ，这些隐式网格默认都是按照 <code>rows</code> 的方向进行排列，高度会自动 <code>拉伸</code> 铺满容器</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139808.webp" alt="img"></p><h3 id="4-13-grid-auto-flow"><a href="#4-13-grid-auto-flow" class="headerlink" title="4.13 grid-auto-flow"></a>4.13 grid-auto-flow</h3><p>明白了什么是 <code>显示网格</code> 和 <code>隐式网格</code> ，就可以看一下 <code> grid-auto-flow</code> 。划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行。这就解释了，上面的 <code>隐式网格</code> 为什么会在 <code>789</code> 的下面，明明父容器右侧还有空白位置，为什么无法铺满，这是因为默认设置了”先行后列”，即 <code>grid-auto-flow: rows</code> ，这个属性会决定网格的排列顺序</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-auto-flow</span>: rows | column | ros dense | column dense;</span><br></pre></td></tr></table></figure><p>将顺序设置为先列后行，即 <code>grid-auto-flow: column</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139823.webp" alt="img"></p><p>如果将网格 <code>1</code> 和网格 <code>2</code> 各占据两个单元格，然后在默认 <code>grid-auto-flow: row</code> 情况下，会产生下面这样的布局</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139869.webp" alt="img"></p><p>上图中，网格 <code>1</code> 和网格 <code>2</code> 后面的位置都空了出来，因为网格 <code>3</code> 的排序是默认跟着网格 <code>2</code> 的，设置 <code>grid-auto-flow: row dense </code> ，可以将空出的位置铺满</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-auto-flow</span>: row dense;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139938.webp" alt="img"></p><p>如果是”先列后行”的情况</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-auto-flow</span>: column</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="4-14-grid-auto-rows，grid-auto-columns"><a href="#4-14-grid-auto-rows，grid-auto-columns" class="headerlink" title="4.14 grid-auto-rows，grid-auto-columns"></a>4.14 grid-auto-rows，grid-auto-columns</h3><p>如果是先行后列的顺序， <code>隐式网格</code> 的列宽默认和 <code>显示网格</code> 一样，行高则是拉伸铺满，如果是先列后行的顺序， <code>隐式网格</code> 的行高默认和 <code>显示网格</code> 一样。难道 <code>隐式网格</code> 的高度或者宽度只能拉升吗？当然不是，可以使用 <code>grid-auto-rows</code> ， <code>grid-auto-columns</code> 控制 <code>隐式网格</code> 的行高和列宽</p><p>先行后列的顺序下，设置 <code>隐式网格</code> 行高为 <code>50px</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: rows;</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139209.webp" alt="img"></p><p>先列后行的顺序下，设置 <code>隐式网格</code> 列高为 <code>50px</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139207.webp" alt="img"></p><p>将 <code>隐式网格</code> 的行高也设置成 <code>100px</code> ，这样就和 <code>显示网格</code> 展示的大小一样了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139104.webp" alt="img"></p><h3 id="4-15-repeat-方法与-auto-fill-关键字"><a href="#4-15-repeat-方法与-auto-fill-关键字" class="headerlink" title="4.15 repeat()方法与 auto-fill 关键字"></a>4.15 repeat()方法与 auto-fill 关键字</h3><p>我们在定义网格的时候，写 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 都是写多个重复值，比如 <code>grid-template-columns: 100px 100px 100px</code> ，简单的网格可以这样定义，但是如果网格很多的时候，难道要这样写吗？ <code>grid-template-columns: 100px 100px 100px 100px 100px ......</code> ，这样很麻烦，可以使用 <code>repeat()</code> 去简化重复的值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repeat(number, length | percent | fr)</span><br></pre></td></tr></table></figure><p>定义一个 5 行 4 列的网格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139116.webp" alt="img"></p><p>也可以具体的数值和 <code>repeat()函数</code> 一起使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">200px</span> <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139124.webp" alt="img"></p><p>还有一种情况，容器的宽度有时候可以容纳更多的网格，但是由于定义了列数量或者行的数量比较少时</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139143.webp" alt="img"></p><p>明明 <code>网格4</code> 是可以继续在 <code>网格3</code> 的后面继续排列的，为什么需要换行呢，仅仅是因为使用了 <code>repeat(3, 100px)</code> 定义三列，有什么办法，在单元格的大小是固定的，但是容器的大小不确定的情况下，使得每一行（或每一列）容纳尽可能多的单元格，这时可以使用 <code>auto-fill</code> 关键字表示自动填充</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139297.webp" alt="img"></p><h3 id="4-16-minmax-方法"><a href="#4-16-minmax-方法" class="headerlink" title="4.16 minmax()方法"></a>4.16 minmax()方法</h3><p><code>minmax()</code> 函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minmax(min, max)</span><br></pre></td></tr></table></figure><p>定义一个列宽和行高不小于 <code>100px</code> ，不大于 <code>200px</code> 的网格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">200px</span>) <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">200px</span>) <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">200px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">200px</span>) <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">200px</span>) <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">200px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139339.webp" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">minmax()方法可以和repeat()方法一起使用</span><br><span class="line">.main &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(3, minmax(100px, 150px));</span><br><span class="line">    grid-template-rows: 100px 100px 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139359.webp" alt="img"></p><h2 id="5-项目属性"><a href="#5-项目属性" class="headerlink" title="5.项目属性"></a>5.项目属性</h2><h3 id="5-1-grid-area"><a href="#5-1-grid-area" class="headerlink" title="5.1 grid-area"></a>5.1 grid-area</h3><p>首先定义一个三行三列的网格</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139387.webp" alt="img"></p><p>默认情况下，网格数字都是按顺序排列的，有什么办法可以指定位置摆放呢？ <code>grid-area</code> 属性就可以指定项目放在哪一个区域，但前提是需要先用 <code>grid-template-areas</code> 属性指定了区域</p><p>将 <code>网格1</code> 放到 <code>区域e</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&quot;a b c&quot;</span></span><br><span class="line">    <span class="string">&quot;d e f&quot;</span></span><br><span class="line">    <span class="string">&quot;g h i&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: e;</span><br><span class="line">  <span class="attribute">background</span>: chartreuse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139490.webp" alt="img"></p><h3 id="5-2-grid-column-start-，-grid-column-end-和-grid-row-start-，-grid-row-end-与-span-关键字"><a href="#5-2-grid-column-start-，-grid-column-end-和-grid-row-start-，-grid-row-end-与-span-关键字" class="headerlink" title="5.2 grid-column-start ， grid-column-end 和 grid-row-start ， grid-row-end 与 span 关键字"></a>5.2 grid-column-start ， grid-column-end 和 grid-row-start ， grid-row-end 与 span 关键字</h3><p>这两对属性表示 grid 子项占据的区域的起始和终止位置，具体方法就是指定项目的四个边框，分别定位在哪根网格线</p><ul><li><code>grid-column-start</code>属性：左边框所在的垂直网格线</li><li><code>grid-column-end</code>属性：右边框所在的垂直网格线</li><li><code>grid-row-start</code>属性：上边框所在的水平网格线</li><li><code>grid-row-end</code>属性：下边框所在的水平网格线</li></ul><p>如何查看所在的网格线？可以利用浏览器的调试工具，这样就可以展示网格线的序号了</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139548.webp" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">grid-column-start` 和 `grid-column-end</span><br><span class="line">.main &#123;</span><br><span class="line">    background: skyblue;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(3, 100px);</span><br><span class="line">    grid-template-rows: repeat(3, 100px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.main div &#123;</span><br><span class="line">    background: pink;</span><br><span class="line">    grid-column-start: 1;</span><br><span class="line">    grid-column-end: 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139579.webp" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">grid-row-start` 和 `grid-row-end</span><br><span class="line">.main &#123;</span><br><span class="line">    background: skyblue;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(3, 100px);</span><br><span class="line">    grid-template-rows: repeat(3, 100px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.main div &#123;</span><br><span class="line">    background: pink;</span><br><span class="line">    grid-row-start: 2;</span><br><span class="line">    grid-row-end: 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139592.webp" alt="img"></p><p>两对属性一起使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139687.webp" alt="img"></p><p>除了使用这种方式外，还可以直接命名网格线，效果也是一样的，使用调试工具可以查看网格线的命名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: [col1] <span class="number">100px</span> [col2] <span class="number">100px</span> [col3] <span class="number">100px</span> [col4];</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [row1] <span class="number">100px</span> [row2] <span class="number">100px</span> [row3] <span class="number">100px</span> [row4];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: col2;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: col3;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: row2;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: row3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139759.webp" alt="img"></p><p>这两对属性还可以使用 <code>span</code> 关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-column</span>&lt;row&gt;-start: span number;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139809.webp" alt="img"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139842.webp" alt="img"></p><h3 id="5-3-grid-row，gird-column"><a href="#5-3-grid-row，gird-column" class="headerlink" title="5.3 grid-row，gird-column"></a>5.3 grid-row，gird-column</h3><p><code>grid-column</code> 属性是 <code>grid-column-start</code> 和 <code>grid-column-end</code> 的合并简写形式， <code>grid-row</code> 属性是 <code>grid-row-start</code> 属性和 <code>grid-row-end</code> 的合并简写形式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-column</span>: &lt;start-line&gt;/ &lt;end-line&gt;;</span><br><span class="line"><span class="attribute">grid-row</span>: &lt;start-line&gt;/ &lt;end-line&gt;;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个属性之中，也可以使用 <code>span</code> 关键字，表示跨越多少个网格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>斜杠以及后面的部分可以省略，默认跨越一个网格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 <code>grid-area</code> 也可以实现同样的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-area</span>: grid-row-start / grid-column-start / grid-row-end / grid-column-end;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">2</span> / <span class="number">3</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139945.webp" alt="img"></p><h3 id="5-4-justify-self，align-self"><a href="#5-4-justify-self，align-self" class="headerlink" title="5.4 justify-self，align-self"></a>5.4 justify-self，align-self</h3><p><code>justify-self</code> 属性设置单元格内容的水平位置（左中右），跟 <code>justify-items</code> 属性的用法完全一致，但只作用于单个项目</p><p><code>align-self</code> 属性设置单元格内容的垂直位置（上中下），跟 <code>align-items</code> 属性的用法完全一致，也是只作用于单个项目</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">justify-self: start | end | center | stretch;</span><br><span class="line"><span class="attribute">align-self</span>: start | end | center | stretch;</span><br></pre></td></tr></table></figure><ul><li>start：对齐单元格的起始边缘</li><li>end：对齐单元格的结束边缘</li><li>center：单元格内部居中</li><li>stretch：拉伸，占满单元格的整个宽度（默认值）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">2</span> / <span class="number">3</span> / <span class="number">3</span>;</span><br><span class="line">  justify-self: end;</span><br><span class="line">  <span class="attribute">align-self</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139962.webp" alt="img"></p><h3 id="5-5-place-self"><a href="#5-5-place-self" class="headerlink" title="5.5 place-self"></a>5.5 place-self</h3><p><code>place-self</code> 属性是 <code>align-self</code> 属性和 <code>justify-self</code> 属性的合并简写形式。如果省略第二个值， <code>place-self</code> 属性会认为这两个值相等</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-self: &lt;align-self&gt;&lt;justify-self&gt;;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">2</span> / <span class="number">3</span> / <span class="number">3</span>;</span><br><span class="line">  place-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139968.webp" alt="img"></p><h2 id="6-布局案例"><a href="#6-布局案例" class="headerlink" title="6.布局案例"></a>6.布局案例</h2><h3 id="6-1-栅格布局"><a href="#6-1-栅格布局" class="headerlink" title="6.1 栅格布局"></a>6.1 栅格布局</h3><p>利用 <code>grid布局</code> 可以轻松实现 <code>栅格布局</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: skyblue;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">12</span>, <span class="number">1</span>fr);</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">grid-auto-rows</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-class">.col-1</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: auto/auto/auto/span <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-class">.col-2</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: auto/auto/auto/span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-class">.col-3</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: auto/auto/auto/span <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-class">.col-4</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: auto/auto/auto/span <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-class">.col-5</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: auto/auto/auto/span <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-class">.col-6</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: auto/auto/auto/span <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-class">.col-7</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: auto/auto/auto/span <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-class">.col-8</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: auto/auto/auto/span <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-class">.col-9</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: auto/auto/auto/span <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-class">.col-10</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: auto/auto/auto/span <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-class">.col-11</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: auto/auto/auto/span <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> <span class="selector-class">.col-12</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: auto/auto/auto/span <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;col-<span class="number">6</span>&quot;&gt;<span class="number">1</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;col-<span class="number">3</span>&quot;&gt;<span class="number">2</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;col-<span class="number">4</span>&quot;&gt;<span class="number">3</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;col-<span class="number">5</span>&quot;&gt;<span class="number">4</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139975.webp" alt="img"></p><h3 id="6-2-不规则子项排列"><a href="#6-2-不规则子项排列" class="headerlink" title="6.2 不规则子项排列"></a>6.2 不规则子项排列</h3><p>如果要实现这样的效果，使用 <code>grid布局</code> 也是轻而易举实现的</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139080.webp" alt="img"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">308px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-list</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">352px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">1</span>fr);</span><br><span class="line">    <span class="attribute">grid-template-areas</span>:</span><br><span class="line">        <span class="string">&quot;a1 a3 a3&quot;</span></span><br><span class="line">        <span class="string">&quot;a2 a3 a3&quot;</span></span><br><span class="line">        <span class="string">&quot;a4 a4 a5&quot;</span></span><br><span class="line">        <span class="string">&quot;a6 a7 a7&quot;</span>;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-list</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: a1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-list</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: a2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-list</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: a3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-list</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: a4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-list</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">5</span>) &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: a5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-list</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">6</span>) &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: a6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-list</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">7</span>) &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: a7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-list</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-list</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-list</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.theme1</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.theme2</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.theme3</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;<span class="selector-tag">main</span>&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;<span class="selector-tag">main</span>-list&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;theme1&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;theme2&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;theme1&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;theme1&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;theme1&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;theme3&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;theme3&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182139113.webp" alt="img"></p><h3 id="6-3-更多布局案例"><a href="#6-3-更多布局案例" class="headerlink" title="6.3 更多布局案例"></a>6.3 更多布局案例</h3><p><a href="https://link.juejin.cn/?target=https://gridbyexample.com/">Grid by Example</a></p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h2><p><code>grid布局</code> 和 <code>flex弹性布局</code> 一样，都是当下最流行的 CSS 布局方案之一。它的优点是可以实现多行多列的布局，属于 <code>二维布局</code> ，基本可以满足任何的布局页面。</p><p>优点：</p><ul><li>固定和灵活的轨道尺寸</li><li>可以使用行号、名称或通过定位网格区域将项目放置在网格上的精确位置</li><li>可以将多个项目放入网格单元格或区域中，它们可以彼此部分重叠</li></ul><p>缺点：</p><ul><li>浏览器兼容性较差</li><li>学习成本较高</li></ul><p><code>grid布局</code> 可以说是目前最强大的 CSS 布局方案，在实际开发过程中，往往 <code>grid布局</code> 和 <code>flex布局</code> 一起结合使用。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grid常用属性</title>
      <link href="/2021/06/12/%E5%89%8D%E7%AB%AF/css/grid%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/"/>
      <url>/2021/06/12/%E5%89%8D%E7%AB%AF/css/grid%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="grid-布局"><a href="#grid-布局" class="headerlink" title="grid 布局"></a>grid 布局</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p><code>grid布局</code>是基于<code>栅格</code>的<code>二维布局</code></p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182158812.png" alt="image-20220518215832748" style="zoom: 50%;" /><h2 id="2-设置-grid-容器"><a href="#2-设置-grid-容器" class="headerlink" title="2.设置 grid 容器"></a>2.设置 grid 容器</h2><h3 id="1-设置行高与列宽"><a href="#1-设置行高与列宽" class="headerlink" title="1.设置行高与列宽"></a>1.设置行高与列宽</h3><p><code>gird-template-rows:行高</code><br><code>gird-template-columns:列宽</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//使用绝对单位</span><br><span class="line">gird-template-rows:行高</span><br><span class="line">gird-template-columns:列宽</span><br><span class="line"></span><br><span class="line">//使用百分比单位</span><br><span class="line">.container &#123;</span><br><span class="line">  <span class="attribute">display</span>: gird;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">33.3%</span> <span class="number">33.3%</span> <span class="number">33.3%</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">33.3%</span> <span class="number">33.3%</span> <span class="number">33.3%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用auto自动填充</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: gird;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> auto <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> auto <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用自适应比例单位</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: gird;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;单位的分类</p><ul><li><p>pt：物理像素</p></li><li><p>px：逻辑像素</p></li><li><p>rem:基于根元素的单位</p><ul><li><code>document.documentElement.style.fontSize=100px;</code></li><li><code>document.querySelector(&quot;body&quot;).style.fontSize=1rem;</code>—&gt;&#x3D;<code>100px</code></li></ul></li><li><p>em:基于父元素的单位</p></li><li><p>fr：自适应比例单位</p></li></ul><h3 id="2-元素排列方向"><a href="#2-元素排列方向" class="headerlink" title="2.元素排列方向"></a>2.元素排列方向</h3><p><code>grid-auto-flow:column</code>元素纵向排列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">,</span><br><span class="line">container &#123;</span><br><span class="line">  <span class="attribute">display</span>: gird;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">33.3%</span> <span class="number">33.3%</span> <span class="number">33.3%</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">33.3%</span> <span class="number">33.3%</span> <span class="number">33.3%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205182208792.png" alt="image-20220518220803705" style="zoom:33%;" /><h3 id="3-容器内部对齐"><a href="#3-容器内部对齐" class="headerlink" title="3.容器内部对齐"></a>3.容器内部对齐</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">justify-items:项目在单元格中的水平对齐方式（<span class="built_in">stretch</span>(默认值) | start | center | end）</span><br><span class="line">align-items:项目在单元格中的垂直对齐方式</span><br><span class="line"></span><br><span class="line">justify-content:整个单元格在容器中的水平对齐方式</span><br><span class="line">align-content:整个单元格在容器中的垂直对齐方式</span><br><span class="line"></span><br><span class="line">grid-auto-rows:溢出行的尺寸（gird-auto-flow为row时需要设置）</span><br><span class="line">grid-auto-columns:溢出的单元格的大小（gird-auto-flow为column时需要设置）</span><br></pre></td></tr></table></figure><h2 id="3-项目属性"><a href="#3-项目属性" class="headerlink" title="3.项目属性"></a>3.项目属性</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//项目列开始和结束所在的线</span><br><span class="line"><span class="attribute">grid-column-start</span>:<span class="number">1</span></span><br><span class="line">grid-column-end:<span class="number">3</span></span><br><span class="line">=grid-column:<span class="number">1</span>/<span class="number">3</span></span><br><span class="line"></span><br><span class="line">//项目行开始和结束所在的线</span><br><span class="line">grid-row-start:<span class="number">2</span></span><br><span class="line">grid-row-end:<span class="number">4</span></span><br><span class="line">=grid-row:<span class="number">2</span>/<span class="number">4</span></span><br><span class="line"></span><br><span class="line">//项目自己在单元格中的对齐方式</span><br><span class="line">justify-self:</span><br><span class="line">align-self:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图库</title>
      <link href="/2021/06/11/%E5%9B%BE%E5%BA%93/%E6%BC%94%E7%A4%BA/"/>
      <url>/2021/06/11/%E5%9B%BE%E5%BA%93/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div><!-- 紫，绿，蓝，黄，红 --><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638225.png">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638225.png</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638728.png">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638728.png</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638880.png">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638880.png</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638238.png">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638238.png</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638430.jpg">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638430.jpg</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638126.png">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638126.png</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638136.png">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071638136.png</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639020.png">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639020.png</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639756.png">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639756.png</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639751.png">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639751.png</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639853.png">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639853.png</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639853.png">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639853.png</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639344.jpg">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639344.jpg</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639957.jpg">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639957.jpg</a></p><p><a href="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639865.jpg">https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071639865.jpg</a></p>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex弹性布局</title>
      <link href="/2021/06/11/%E5%89%8D%E7%AB%AF/css/flex%E5%B8%83%E5%B1%80%EF%BC%88%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%EF%BC%89/"/>
      <url>/2021/06/11/%E5%89%8D%E7%AB%AF/css/flex%E5%B8%83%E5%B1%80%EF%BC%88%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>学习来源：稀土掘金-<a href="https://juejin.cn/post/7019075844664459278">IDuxFE</a></p><h1 id="1-flex-布局（弹性布局）"><a href="#1-flex-布局（弹性布局）" class="headerlink" title="1.flex 布局（弹性布局）"></a>1.flex 布局（弹性布局）</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><ul><li><code>弹性盒子</code>是一种用于<code>按行或按列</code>布局元素的<code>一维布局</code>方法</li><li>元素可以膨胀以填充额外的空间，或者收缩以适应更小的空间，适用于任何元素上</li><li>如果一个元素使用了 flex 布局，则会在内部形成<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">BFC</a></li><li>flex 布局已经得到了所有浏览器的支持</li></ul><h2 id="2-主轴与交叉轴"><a href="#2-主轴与交叉轴" class="headerlink" title="2.主轴与交叉轴"></a>2.主轴与交叉轴</h2><ul><li>采用 flex 布局的元素，称为”<code>容器</code>“ （ flex container），它的所有子元素都是容器的”<code>项目</code>“（flex item）</li><li>容器默认存在两根轴：<code>水平的主轴</code>（main axis）和<code>垂直的交叉轴</code>（cross axis）</li><li>主轴的开始位置（与边框的交叉点）叫做 <code>main start</code> ，结束位置叫做 <code>main end</code> ；交叉轴的开始位置叫做 <code>cross start</code> ，结束位置叫做 <code>cross end</code> 。</li></ul><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181428611.png" style="zoom: 33%;" /><h2 id="3-容器的属性"><a href="#3-容器的属性" class="headerlink" title="3.容器的属性"></a>3.容器的属性</h2><p>6 个属性，见下图</p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181430903.png" style="zoom:50%;" /><h3 id="3-1-flex-direction"><a href="#3-1-flex-direction" class="headerlink" title="3.1 flex-direction"></a>3.1 flex-direction</h3><p><code>flex-direction</code> 属性决定主轴的方向（即项目的排列方向）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br></pre></td></tr></table></figure><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181431547.png"></p><h3 id="3-2-flx-wrap"><a href="#3-2-flx-wrap" class="headerlink" title="3.2 flx-wrap"></a>3.2 flx-wrap</h3><p>默认情况下，项目都排在一条线上，无论是否给定宽度，都是不会主动换行的：(长度不够也是不会主动换行的)</p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181432372.png" alt="image-20220518143218288" style="zoom:33%;" /><p>如果需要换行，需要设置 flex-wrap</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br></pre></td></tr></table></figure><ul><li><code>nowrap</code>（默认值）：不换行。</li><li><code>wrap</code>：换行，第一行在上方。</li><li><code>wrap-reverse</code>：换行，第一行在下方。</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433664.png"></p><h3 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h3><p><code>flex-flow</code> 属性是 <code>flex-direction</code>属性和 <code>flex-wrap</code> 属性的简写形式，默认值为 <code>row nowrap</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: &lt;flex-direction&gt; &lt;flex-wrap&gt;;</span><br></pre></td></tr></table></figure><h3 id="3-4-justify-content"><a href="#3-4-justify-content" class="headerlink" title="3.4 justify-content"></a>3.4 justify-content</h3><p><code>justify-content</code> 属性定义了项目在<strong>主轴</strong>上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: flex-start | flex-end | center | space-around | space-between |</span><br><span class="line">  space-between;</span><br></pre></td></tr></table></figure><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-around</code>：每个项目两侧的间隔相等。</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-evenly</code>：每个项目的间隔与项目和容器之间的间隔是相等的。</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433868.webp" alt="img"></p><h3 id="3-5-align-items"><a href="#3-5-align-items" class="headerlink" title="3.5 align-items"></a>3.5 align-items</h3><p><code>align-items</code> 属性定义项目在<strong>交叉轴</strong>上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br></pre></td></tr></table></figure><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）: 如果项目未设置高度或设为 auto，将占满整个容器的高度。</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433894.webp" alt="img"></p><h3 id="3-6-align-content"><a href="#3-6-align-content" class="headerlink" title="3.6 align-content"></a>3.6 align-content</h3><p><code>align-content</code> 属性定义了<font color='red'>多根轴线</font>的对齐方式，前提是需要设置 flex-wrap: wrap，否则不会有效</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around |</span><br><span class="line">  stretch;</span><br></pre></td></tr></table></figure><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li></ul><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433990.webp" alt="img"></p><h2 id="4-项目的属性"><a href="#4-项目的属性" class="headerlink" title="4.项目的属性"></a>4.项目的属性</h2><h3 id="4-1-order"><a href="#4-1-order" class="headerlink" title="4.1 order"></a>4.1 order</h3><p><code>order</code> 属性定义项目的排列顺序。<font color='red'>数值越小，排列越靠前</font>，默认为 0，可以是负数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">order</span>: &lt;integer&gt;;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433873.webp" alt="img"></p><h3 id="4-2-flex-grow"><a href="#4-2-flex-grow" class="headerlink" title="4.2 flex-grow"></a>4.2 flex-grow</h3><p><code>flex-grow</code> flex 容器中剩余空间的多少应该分配给项目，也称为扩展规则。最终的项目的宽度为：自身宽度 + 容器剩余空间分配宽度，flex-grow 最大值是 1，超过 1 按照 1 来扩展</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-grow</span>: &lt;number&gt;;</span><br><span class="line"><span class="comment">/* default 0 */</span></span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433883.webp" alt="img"></p><h3 id="4-3-flex-shrink"><a href="#4-3-flex-shrink" class="headerlink" title="4.3 flex-shrink"></a>4.3 flex-shrink</h3><p><code>flex-shrink</code> 属性指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值，默认值是 1</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-shrink</span>: &lt;number&gt;;</span><br><span class="line"><span class="comment">/* default 1 */</span></span><br></pre></td></tr></table></figure><p>默认情况下，第一个 div 宽度是 200，第二个 div 宽度是 300，两个相加应该超过父元素的 400，但是由于 flex-shrink 都设置为 1，将两个 div 都收缩在父元素中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: cadetblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433880.webp" alt="img"></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433106.webp" alt="img"></p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433124.webp" alt="img"></p><p>如果将第一个 div 设置为 <code>flex-shrink: 0; </code> 不收缩，则按容器实际宽度展示</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433122.webp" alt="img"></p><p>那收缩后的子项宽度是怎么样计算的呢？实际上有一个公示：</p><ol><li><code>(200+300)</code>所有子项的宽度的和 - <code>(400)</code>容器的宽度 &#x3D; <code>(100)</code></li><li>第一个子项的宽度占比：<code>2/5</code>，第二个子项的宽度占比：<code>3/5</code></li><li>则第一个子项的的宽度为：<code>200</code> - <code>2/5 * 100</code> &#x3D; 160，第二个子项的宽度为：<code>300</code> - <code>3/5 * 100</code> &#x3D; 240</li></ol><h3 id="4-4-flex-basis"><a href="#4-4-flex-basis" class="headerlink" title="4.4 flex-basis"></a>4.4 flex-basis</h3><p><code>flex-basis</code> 指定了子项在容器主轴方向上的初始大小，优先级高于自身的宽度 width</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-basis</span>: <span class="number">0</span> | <span class="number">100%</span> | auto | &lt;length&gt;;</span><br></pre></td></tr></table></figure><p>宽度是 200，但是由于设置了 <code>flex-basis: 300px; </code> ，所以子项最终宽度是大于自身设置的宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433112.webp" alt="img"></p><h3 id="4-5-flex"><a href="#4-5-flex" class="headerlink" title="4.5 flex"></a>4.5 flex</h3><p><code>flex</code> 属性是 <code>flex-grow</code> , <code>flex-shrink</code> 和 <code>flex-basis</code> 的简写，默认值为 <code>0 1 auto</code> 。后两个属性可选。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>: none | [ &lt; <span class="string">&quot;flex-grow&quot;</span> &gt;&lt; <span class="string">&quot;flex-shrink&quot;</span> &gt;? || &lt; <span class="string">&quot;flex-basis&quot;</span> &gt;];</span><br></pre></td></tr></table></figure><h3 id="4-6-align-self"><a href="#4-6-align-self" class="headerlink" title="4.6 align-self"></a>4.6 align-self</h3><p><code>align-self</code> 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 <code>align-items</code> 属性。默认值为 <code>auto</code> ，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>stretch</code> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: violet;</span><br><span class="line">  <span class="attribute">align-self</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: greenyellow;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433132.webp" alt="img"></p><h2 id="5-关于-flex-布局在-IE-浏览器上的坑"><a href="#5-关于-flex-布局在-IE-浏览器上的坑" class="headerlink" title="5.关于 flex 布局在 IE 浏览器上的坑"></a>5.关于 flex 布局在 IE 浏览器上的坑</h2><p>虽然 <code>flex布局</code> 已经得到了 <code>IE浏览器</code> 的支持，但是部分属性在 <code>IE浏览器</code> 上会不生效，或者效果与其他浏览器不一致，在<a href="https://link.juejin.cn/?target=https://github.com/philipwalton/flexbugs">Flexbugs</a>中可以看到 <code>flex布局</code> 在 <code>IE浏览器</code> 糟糕表现的详情描述</p><p>这里大概总结了几个，解决办法可以看链接</p><ul><li><a href="https://link.juejin.cn/?target=https://blog.csdn.net/heyNewbie/article/details/101302169">flex-direction: column 属性不生效</a></li><li><a href="https://link.juejin.cn/?target=https://www.cnblogs.com/SamWeb/p/9836497.html">不支持 min-height 和 flex: 1 </a></li><li><a href="https://link.juejin.cn/?target=https://blog.csdn.net/zyq19930325/article/details/87930077?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_aggregation-1-87930077.pc_agg_rank_aggregation&utm_term=flex%E5%B8%83%E5%B1%80%E5%85%BC%E5%AE%B9ie%E6%B5%8F%E8%A7%88%E5%99%A8&spm=1000.2123.3001.4430">align-items: center 文字溢出等问题</a></li></ul><h2 id="6-布局案例"><a href="#6-布局案例" class="headerlink" title="6.布局案例"></a>6.布局案例</h2><h3 id="6-1-等高布局"><a href="#6-1-等高布局" class="headerlink" title="6.1 等高布局"></a>6.1 等高布局</h3><p>每一列的内容不一样，但容器的高度时等高的</p><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433279.webp" alt="img"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433314.webp" alt="img"></p><h3 id="6-2-左侧宽度固定，右侧自适应布局"><a href="#6-2-左侧宽度固定，右侧自适应布局" class="headerlink" title="6.2 左侧宽度固定，右侧自适应布局"></a>6.2 左侧宽度固定，右侧自适应布局</h3><p>常见的 TOB 系统布局方式，左侧是菜单树，右侧是内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left-tree</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  lex: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433342.webp" alt="img"></p><h3 id="6-3-粘性页脚"><a href="#6-3-粘性页脚" class="headerlink" title="6.3 粘性页脚"></a>6.3 粘性页脚</h3><p>无论中间的内容有多少，页脚始终在底部展示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205181433354.webp" alt="img"></p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h2><p><code>flex布局</code> 是目前最流行的布局方式之一，优点是浏览器兼容性较好，学习成本较低，上手简单，可以快速通过 <code>flex布局</code> 实现布局效果。缺点是相较于 <code>grid网格布局</code> 来说， <code>flex布局</code> 是 <code>一维布局</code> ，一般用于单行或者单列的布局，如果要实现多行多列的布局，推荐使用 <code>gird网格布局</code> 。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2021/05/26/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/05/26/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h1><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071611315.png" alt="image-20220504131711053"></p><h1 id="2-使用-hexo-搭建博客"><a href="#2-使用-hexo-搭建博客" class="headerlink" title="2.使用 hexo 搭建博客"></a>2.使用 hexo 搭建博客</h1><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071611317.png" alt="image-20220504131716049"></p><ul><li><p>本地化运行博客：hexo s</p></li><li><p>创建文章：hexo n “文章标题”</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">D</span>:\<span class="title class_">Blog</span>&gt;hexo n <span class="string">&quot;第一篇博客&quot;</span></span><br><span class="line"><span class="variable constant_">INFO</span>  <span class="title class_">Validating</span> config</span><br><span class="line"><span class="variable constant_">INFO</span>  <span class="title class_">Created</span>: <span class="attr">D</span>:\<span class="title class_">Blog</span>\source\_posts\第一篇博客.<span class="property">md</span></span><br></pre></td></tr></table></figure><ul><li>更新文章<ul><li>hexo clean:清理缓存</li><li>hexo g:解析生成</li><li>hexo s :预览</li></ul></li></ul><h1 id="3-将博客部署到-github"><a href="#3-将博客部署到-github" class="headerlink" title="3.将博客部署到 github"></a>3.将博客部署到 github</h1><p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071611318.png" alt="image-20220504134029610"></p><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071611319.png" alt="image-20220504141119903" style="zoom:50%;" /><ul><li><p>hexo clean:清理缓存</p></li><li><p>hexo g:解析生成</p></li><li><p>hexo d：推导 github</p></li></ul><h1 id="4-更换主题"><a href="#4-更换主题" class="headerlink" title="4.更换主题"></a>4.更换主题</h1><img src="https://typorazhh.oss-cn-nanjing.aliyuncs.com/202205071611320.png" alt="image-20220504142911931" style="zoom:50%;" /><h1 id="5-git-版本控制"><a href="#5-git-版本控制" class="headerlink" title="*5.git 版本控制"></a>*5.git 版本控制</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">//初始化git</span></span><br><span class="line">git add . <span class="comment">//添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;初始化仓库&quot;</span>   <span class="comment">//提交到本地 -m后面是提交简介</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin <span class="attr">https</span>:<span class="comment">//github.com/ionian-aries/blog.git //更改源</span></span><br><span class="line">git push -u origin main  <span class="comment">//推动到远程</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/Ionian-Aries/Blog.git   //完整的克隆</span></span><br><span class="line">npm i <span class="comment">//安装依赖</span></span><br></pre></td></tr></table></figure><p>解决方法：<br>1、添加到本地仓库</p><p>git add .</p><p>2、添加提交描述</p><p>git commit -m ‘提交’</p><p>3、提交前先从远程仓库主分支中拉取请求</p><p>git pull origin main</p><p>4、把本地仓库代码提交</p><p>git push -u origin main</p><h1 id="6-picgo-图床"><a href="#6-picgo-图床" class="headerlink" title="6.picgo 图床"></a>6.picgo 图床</h1><ul><li>截图保存，粘贴在 typora 中</li><li><code>ctrl+shift+u</code>上传图片到 github 图床，然后直接复制链接</li><li>替换图片中的地址</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
